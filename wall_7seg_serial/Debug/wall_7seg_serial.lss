
wall_7seg_serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080019a  0080019a  0000104a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001383  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf8  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077d  00000000  00000000  0000312b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  000038a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000765  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  000042dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e9       	ldi	r26, 0x9A	; 154
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 39       	cpi	r26, 0x9F	; 159
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/**********************************************************************************************/
/*                                      INT 0 Interrupts                                      */
/**********************************************************************************************/
ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	TCNT0 = 0;
  b0:	16 bc       	out	0x26, r1	; 38
}
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_2>:

ISR(INT1_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	float const dist = TCNT1 / (1000000.0 / 256) *343;
  ce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  d2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	auto const cnt = TCNT0;
  d6:	86 b5       	in	r24, 0x26	; 38
	digit = cnt;
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <digit+0x1>
  e0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <digit>
	OCR0B = 2*cnt;
  e4:	88 0f       	add	r24, r24
  e6:	88 bd       	out	0x28, r24	; 40
	//Serial::sendf("dist: %i\n",TCNT0);//, (uint8_t)(dist*10));
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_14>:
/**********************************************************************************************/
/*                                     Timer 0 Interrupts                                     */
/**********************************************************************************************/

ISR(TIMER0_COMPA_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <__vector_14+0x14>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << PORTD4);
 112:	5c 9a       	sbi	0x0b, 4	; 11
	for(volatile int i = 0; i < 0; i++); // wait 13us (measured)
 114:	1a 82       	std	Y+2, r1	; 0x02
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	97 ff       	sbrs	r25, 7
 11e:	09 c0       	rjmp	.+18     	; 0x132 <__vector_14+0x38>
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	97 fd       	sbrc	r25, 7
 130:	f7 cf       	rjmp	.-18     	; 0x120 <__vector_14+0x26>
	PORTD &= ~(1 << PORTD4);
 132:	5c 98       	cbi	0x0b, 4	; 11
	
	PORTD |= (1 << PORTD7);
 134:	5f 9a       	sbi	0x0b, 7	; 11
	
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_15>:

ISR(TIMER0_COMPB_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
	PORTD &= ~(1 << PORTD7);
 156:	5f 98       	cbi	0x0b, 7	; 11
}
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_7>:
/*                                     Timer 2 Interrupts                                     */
/**********************************************************************************************/


ISR(TIMER2_COMPA_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	//Serial::send("TIMER2_OVF_vect\n");
	
	//PORTD |=  (1 << PORTD4);
	//PORTD &= ~(1 << PORTD4);
	static volatile uint8_t dig = 0;
	dig++;
 184:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
	dig %= 4; // toggle digit
 18e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
 192:	83 70       	andi	r24, 0x03	; 3
 194:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
	disp(_off);
 198:	81 e1       	ldi	r24, 0x11	; 17
 19a:	0e 94 01 02 	call	0x402	; 0x402 <_ZN4seg74dispENS_11_7_seg_valsE>
	PORTC = 0;
 19e:	18 b8       	out	0x08, r1	; 8
	int const digit_ = digit;
 1a0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <digit>
 1a4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <digit+0x1>
	switch(dig)
 1a8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <__data_end>
 1ac:	91 30       	cpi	r25, 0x01	; 1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <__vector_7+0x50>
 1b0:	4d c0       	rjmp	.+154    	; 0x24c <__vector_7+0xea>
 1b2:	c0 f1       	brcs	.+112    	; 0x224 <__vector_7+0xc2>
 1b4:	92 30       	cpi	r25, 0x02	; 2
 1b6:	31 f1       	breq	.+76     	; 0x204 <__vector_7+0xa2>
 1b8:	93 30       	cpi	r25, 0x03	; 3
 1ba:	49 f4       	brne	.+18     	; 0x1ce <__vector_7+0x6c>
			else if((i = digit_/10))
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 3:
			disp((_7_seg_vals)absval(digit_%10));
 1bc:	c9 01       	movw	r24, r18
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>

#include "avr/io.h"

inline uint8_t absval(int8_t val)
{
	if(val < 0) val = -val;
 1c6:	87 fd       	sbrc	r24, 7
 1c8:	56 c0       	rjmp	.+172    	; 0x276 <__vector_7+0x114>
 1ca:	0e 94 01 02 	call	0x402	; 0x402 <_ZN4seg74dispENS_11_7_seg_valsE>
			break;
	}

	PORTC = dig_enable[dig];
 1ce:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <__data_end>
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e8 5f       	subi	r30, 0xF8	; 248
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 81       	ld	r24, Z
 1da:	88 b9       	out	0x08, r24	; 8
	TCNT2 = 100;
 1dc:	84 e6       	ldi	r24, 0x64	; 100
 1de:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	//Serial::send("/TIMER2_OVF_vect\n");
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 2: {
			int i;
			if(digit_ < 0 && !(digit_ < -9))
 204:	c9 01       	movw	r24, r18
 206:	09 96       	adiw	r24, 0x09	; 9
 208:	09 97       	sbiw	r24, 0x09	; 9
 20a:	88 f1       	brcs	.+98     	; 0x26e <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/10))
 20c:	ea e0       	ldi	r30, 0x0A	; 10
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	c9 01       	movw	r24, r18
 212:	bf 01       	movw	r22, r30
 214:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 218:	61 15       	cp	r22, r1
 21a:	71 05       	cpc	r23, r1
 21c:	c1 f2       	breq	.-80     	; 0x1ce <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 21e:	cb 01       	movw	r24, r22
 220:	bf 01       	movw	r22, r30
 222:	cf cf       	rjmp	.-98     	; 0x1c2 <__vector_7+0x60>
	int const digit_ = digit;
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
 224:	2d 39       	cpi	r18, 0x9D	; 157
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	38 07       	cpc	r19, r24
 22a:	0c f1       	brlt	.+66     	; 0x26e <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/1000))
 22c:	c9 01       	movw	r24, r18
 22e:	68 ee       	ldi	r22, 0xE8	; 232
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	49 f2       	breq	.-110    	; 0x1ce <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 23c:	cb 01       	movw	r24, r22
 23e:	6a e0       	ldi	r22, 0x0A	; 10
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 246:	0e 94 01 02 	call	0x402	; 0x402 <_ZN4seg74dispENS_11_7_seg_valsE>
 24a:	c1 cf       	rjmp	.-126    	; 0x1ce <__vector_7+0x6c>
			//PORTB &= ~dp;
			break;
		}
		case 1: {
			int i;
			if(digit_ < -9 && !(digit_ < -99))
 24c:	c9 01       	movw	r24, r18
 24e:	8d 59       	subi	r24, 0x9D	; 157
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	8a 35       	cpi	r24, 0x5A	; 90
 254:	91 05       	cpc	r25, r1
 256:	58 f0       	brcs	.+22     	; 0x26e <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/100))
 258:	c9 01       	movw	r24, r18
 25a:	64 e6       	ldi	r22, 0x64	; 100
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 262:	61 15       	cp	r22, r1
 264:	71 05       	cpc	r23, r1
 266:	09 f4       	brne	.+2      	; 0x26a <__vector_7+0x108>
 268:	b2 cf       	rjmp	.-156    	; 0x1ce <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 26a:	cb 01       	movw	r24, r22
 26c:	a8 cf       	rjmp	.-176    	; 0x1be <__vector_7+0x5c>
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
				disp(_dash); // show negative sign
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	0e 94 01 02 	call	0x402	; 0x402 <_ZN4seg74dispENS_11_7_seg_valsE>
 274:	ac cf       	rjmp	.-168    	; 0x1ce <__vector_7+0x6c>
 276:	81 95       	neg	r24
 278:	a8 cf       	rjmp	.-176    	; 0x1ca <__vector_7+0x68>

0000027a <__vector_18>:
/************************************************************************/
/*                                USART                                 */
/************************************************************************/

ISR(USART_RX_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	const char value = Serial::read();
 2a6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN6Serial4readEv>
 2aa:	89 83       	std	Y+1, r24	; 0x01
	digit = atoi(&value);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 82 04 	call	0x904	; 0x904 <atoi>
 2b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <digit+0x1>
 2b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <digit>
	Serial::send(digit);
 2bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <digit>
 2c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <digit+0x1>
 2c4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Serial4sendEh>
}
 2c8:	0f 90       	pop	r0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <main>:

extern volatile float digit;

int main(void)
{
    DDRB = 0xff;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
 2f4:	87 b9       	out	0x07, r24	; 7
	DDRD =  (1 << PORTD4) | 
			(1 << PORTD7);
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	8a b9       	out	0x0a, r24	; 10

	Serial::begin(4800,Serial::async);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	80 ec       	ldi	r24, 0xC0	; 192
 2fe:	92 e1       	ldi	r25, 0x12	; 18
 300:	0e 94 09 02 	call	0x412	; 0x412 <_ZN6Serial5beginEjNS_4ModeE>
	Serial::send("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN6Serial4sendEPc>
		_256			= 0x06,
		_1024			= 0x07
	} Prescaler;
	
	inline void setMode(Mode mode) {
		Serial::sendf("T2 set mode: 0x%02X\n", mode);
 30c:	1f 92       	push	r1
 30e:	d2 e0       	ldi	r29, 0x02	; 2
 310:	df 93       	push	r29
 312:	81 e2       	ldi	r24, 0x21	; 33
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN6Serial5sendfEPKcz>
		TCCR2A |=   mode &  ((1 << WGM21) | (1 << WGM20));
 31e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		TCCR2A &= ~(mode & ~((1 << WGM21) | (1 << WGM20)));
 328:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 32c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
			
		TCCR2B |=   mode & (1 << WGM22);
 330:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 334:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(mode & ~(1 << WGM22));
 338:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 33c:	8d 7f       	andi	r24, 0xFD	; 253
 33e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	}
	
	inline void setPrescaler(Prescaler prescaler) {
		Serial::sendf("T2 set prescaler: 0x%02X\n", prescaler);
 342:	1f 92       	push	r1
 344:	c4 e0       	ldi	r28, 0x04	; 4
 346:	cf 93       	push	r28
 348:	86 e3       	ldi	r24, 0x36	; 54
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN6Serial5sendfEPKcz>
		TCCR2B |=    prescaler & ((1 << CS22) | (1 << CS21) | (1 << CS20));
 354:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 358:	84 60       	ori	r24, 0x04	; 4
 35a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(~prescaler & ((1 << CS22) | (1 << CS21) | (1 << CS20)));
 35e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 362:	8c 7f       	andi	r24, 0xFC	; 252
 364:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    {	// Setup Timer 2
		using namespace Timer2;
		Timer2::setMode(CTC);
	    Timer2::setPrescaler(_64);
		
	    TIMSK2 |= (1 <<OCIE2A);
 368:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		
		OCR2A = 203;
 372:	8b ec       	ldi	r24, 0xCB	; 203
 374:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		T0_fall			= 0x06,
		T0_rise			= 0x07
	} Prescaler;
	
	inline void setMode(Mode mode) {
		Serial::sendf("T0 set mode: 0x%02X\n", mode);
 378:	1f 92       	push	r1
 37a:	df 93       	push	r29
 37c:	80 e5       	ldi	r24, 0x50	; 80
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN6Serial5sendfEPKcz>
		TCCR0A |=   mode &  ((1 << WGM01) | (1 << WGM00));
 388:	84 b5       	in	r24, 0x24	; 36
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	84 bd       	out	0x24, r24	; 36
		TCCR0A &= ~(mode & ~((1 << WGM01) | (1 << WGM00)));
 38e:	84 b5       	in	r24, 0x24	; 36
 390:	84 bd       	out	0x24, r24	; 36
		
		TCCR0B |=   mode &  (1 << WGM02);
 392:	85 b5       	in	r24, 0x25	; 37
 394:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(mode & ~(1 << WGM02));
 396:	85 b5       	in	r24, 0x25	; 37
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	85 bd       	out	0x25, r24	; 37
	}
	
	inline void setPrescaler(Prescaler prescaler) {
		Serial::sendf("T0 set prescaler: 0x%02X\n", prescaler);
 39c:	1f 92       	push	r1
 39e:	cf 93       	push	r28
 3a0:	85 e6       	ldi	r24, 0x65	; 101
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	9f 93       	push	r25
 3a6:	8f 93       	push	r24
 3a8:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN6Serial5sendfEPKcz>
		TCCR0B |=   prescaler &  ((1 << CS02) | (1 << CS01) | (1 << CS00));
 3ac:	85 b5       	in	r24, 0x25	; 37
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(~prescaler & ((1 << CS02) | (1 << CS01) | (1 << CS00)));
 3b2:	85 b5       	in	r24, 0x25	; 37
 3b4:	8c 7f       	andi	r24, 0xFC	; 252
 3b6:	85 bd       	out	0x25, r24	; 37
	{	// Setup Timer 0
		using namespace Timer0;
		Timer0::setMode(CTC);
		Timer0::setPrescaler(Timer0::_256);
		
		OCR0A = 194;
 3b8:	82 ec       	ldi	r24, 0xC2	; 194
 3ba:	87 bd       	out	0x27, r24	; 39
	
		TIMSK0 |= (1 << OCIE0A) | (1 << OCIE0B);
 3bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 3c0:	86 60       	ori	r24, 0x06	; 6
 3c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	}

	EICRA = (1 << ISC01) | (1 << ISC11) | (1 << ISC00);
 3c6:	8b e0       	ldi	r24, 0x0B	; 11
 3c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= (1 << INT1) | (1 << INT0);
 3cc:	8d b3       	in	r24, 0x1d	; 29
 3ce:	83 60       	ori	r24, 0x03	; 3
 3d0:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 3d2:	78 94       	sei
	
	Serial::sendf("0x%08x\n",53.2f);
 3d4:	82 e4       	ldi	r24, 0x42	; 66
 3d6:	8f 93       	push	r24
 3d8:	84 e5       	ldi	r24, 0x54	; 84
 3da:	8f 93       	push	r24
 3dc:	8c ec       	ldi	r24, 0xCC	; 204
 3de:	8f 93       	push	r24
 3e0:	8d ec       	ldi	r24, 0xCD	; 205
 3e2:	8f 93       	push	r24
 3e4:	8f e7       	ldi	r24, 0x7F	; 127
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	9f 93       	push	r25
 3ea:	8f 93       	push	r24
 3ec:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN6Serial5sendfEPKcz>
 3f0:	8d b7       	in	r24, 0x3d	; 61
 3f2:	9e b7       	in	r25, 0x3e	; 62
 3f4:	46 96       	adiw	r24, 0x16	; 22
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	9e bf       	out	0x3e, r25	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	8d bf       	out	0x3d, r24	; 61
 400:	ff cf       	rjmp	.-2      	; 0x400 <__LOCK_REGION_LENGTH__>

00000402 <_ZN4seg74dispENS_11_7_seg_valsE>:
#include <avr/io.h>
using namespace seg7;

void seg7::disp(_7_seg_vals val)
{
	PORTB = ~num_map[val];
 402:	e8 2f       	mov	r30, r24
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	e9 57       	subi	r30, 0x79	; 121
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	80 81       	ld	r24, Z
 40c:	80 95       	com	r24
 40e:	85 b9       	out	0x05, r24	; 5
 410:	08 95       	ret

00000412 <_ZN6Serial5beginEjNS_4ModeE>:
	}
	return 0ULL;
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
 412:	af 92       	push	r10
 414:	bf 92       	push	r11
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 426:	61 30       	cpi	r22, 0x01	; 1
 428:	09 f4       	brne	.+2      	; 0x42c <_ZN6Serial5beginEjNS_4ModeE+0x1a>
 42a:	49 c0       	rjmp	.+146    	; 0x4be <_ZN6Serial5beginEjNS_4ModeE+0xac>
 42c:	e8 f1       	brcs	.+122    	; 0x4a8 <_ZN6Serial5beginEjNS_4ModeE+0x96>
 42e:	62 30       	cpi	r22, 0x02	; 2
 430:	a9 f4       	brne	.+42     	; 0x45c <_ZN6Serial5beginEjNS_4ModeE+0x4a>
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
 432:	5c 01       	movw	r10, r24
 434:	c1 2c       	mov	r12, r1
 436:	d1 2c       	mov	r13, r1
 438:	e1 2c       	mov	r14, r1
 43a:	f1 2c       	mov	r15, r1
 43c:	00 e0       	ldi	r16, 0x00	; 0
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	28 e4       	ldi	r18, 0x48	; 72
 442:	38 ee       	ldi	r19, 0xE8	; 232
 444:	41 e0       	ldi	r20, 0x01	; 1
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__udivdi3>
 454:	af ef       	ldi	r26, 0xFF	; 255
 456:	0e 94 41 03 	call	0x682	; 0x682 <__adddi3_s8>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <_ZN6Serial5beginEjNS_4ModeE+0x4e>

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
	uint16_t ubrr = getUBRR(baudRate,mode);
	UBRR0H = (uint8_t)(ubrr >> 8);				// Set Buad Rate
 460:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)ubrr;
 464:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A &= ~(1 << U2X0);						// disable asnyc2x, apparently this can sometimes be necessary
 468:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 46c:	8d 7f       	andi	r24, 0xFD	; 253
 46e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B |= (1 << RXCIE0);					// Enable receiver interrupt
 472:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 476:	80 68       	ori	r24, 0x80	; 128
 478:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		// Enable RX(receiver) and TX(transmitter)
 47c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 480:	88 61       	ori	r24, 0x18	; 24
 482:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// set frame: 8bit 1stop
 486:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 48a:	86 60       	ori	r24, 0x06	; 6
 48c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	sei();
 490:	78 94       	sei
}
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	bf 90       	pop	r11
 4a4:	af 90       	pop	r10
 4a6:	08 95       	ret
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 4a8:	5c 01       	movw	r10, r24
 4aa:	c1 2c       	mov	r12, r1
 4ac:	d1 2c       	mov	r13, r1
 4ae:	e1 2c       	mov	r14, r1
 4b0:	f1 2c       	mov	r15, r1
 4b2:	00 e0       	ldi	r16, 0x00	; 0
 4b4:	10 e0       	ldi	r17, 0x00	; 0
 4b6:	20 e2       	ldi	r18, 0x20	; 32
 4b8:	31 ea       	ldi	r19, 0xA1	; 161
 4ba:	47 e0       	ldi	r20, 0x07	; 7
 4bc:	c4 cf       	rjmp	.-120    	; 0x446 <_ZN6Serial5beginEjNS_4ModeE+0x34>
static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
 4be:	5c 01       	movw	r10, r24
 4c0:	c1 2c       	mov	r12, r1
 4c2:	d1 2c       	mov	r13, r1
 4c4:	e1 2c       	mov	r14, r1
 4c6:	f1 2c       	mov	r15, r1
 4c8:	00 e0       	ldi	r16, 0x00	; 0
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	24 e2       	ldi	r18, 0x24	; 36
 4ce:	34 ef       	ldi	r19, 0xF4	; 244
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	b9 cf       	rjmp	.-142    	; 0x446 <_ZN6Serial5beginEjNS_4ModeE+0x34>

000004d4 <_ZN6Serial4sendEh>:
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 4d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4d8:	95 ff       	sbrs	r25, 5
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <_ZN6Serial4sendEh>
		;
	UDR0 = data;
 4dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return data;
}
 4e0:	08 95       	ret

000004e2 <_ZN6Serial4readEv>:

uint8_t Serial::read()
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 4e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4e6:	85 ff       	sbrs	r24, 5
 4e8:	fc cf       	rjmp	.-8      	; 0x4e2 <_ZN6Serial4readEv>
		;
	return UDR0;
 4ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 4ee:	08 95       	ret

000004f0 <_ZN6Serial4sendEPc>:

void Serial::send(char* data)
{
	while(*data)
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 81       	ld	r18, Z
 4f4:	22 23       	and	r18, r18
 4f6:	51 f0       	breq	.+20     	; 0x50c <_ZN6Serial4sendEPc+0x1c>
 4f8:	31 96       	adiw	r30, 0x01	; 1
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 4fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4fe:	95 ff       	sbrs	r25, 5
 500:	fc cf       	rjmp	.-8      	; 0x4fa <_ZN6Serial4sendEPc+0xa>
		;
	UDR0 = data;
 502:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 506:	21 91       	ld	r18, Z+
 508:	21 11       	cpse	r18, r1
 50a:	f7 cf       	rjmp	.-18     	; 0x4fa <_ZN6Serial4sendEPc+0xa>
 50c:	08 95       	ret

0000050e <_ZN6Serial5sendfEPKcz>:

/** 
 * Note: if the output string is greater than 50 this function calls sprintf twice
 */
void Serial::sendf(char const* format, ...)	// using va_list to minimize program size
{
 50e:	af 92       	push	r10
 510:	bf 92       	push	r11
 512:	cf 92       	push	r12
 514:	df 92       	push	r13
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	ce 01       	movw	r24, r28
 528:	0d 96       	adiw	r24, 0x0d	; 13
 52a:	fc 01       	movw	r30, r24
 52c:	c1 90       	ld	r12, Z+
 52e:	d1 90       	ld	r13, Z+
 530:	7f 01       	movw	r14, r30
	int size;
	va_list vl;
	va_start(vl,format);
	char *str = (char*)malloc(30);
 532:	8e e1       	ldi	r24, 0x1E	; 30
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 61 03 	call	0x6c2	; 0x6c2 <malloc>
 53a:	8c 01       	movw	r16, r24
	if(!((size = vsprintf(str, format, vl)) < 30))
 53c:	a7 01       	movw	r20, r14
 53e:	b6 01       	movw	r22, r12
 540:	0e 94 a8 04 	call	0x950	; 0x950 <vsprintf>
 544:	5c 01       	movw	r10, r24
 546:	4e 97       	sbiw	r24, 0x1e	; 30
 548:	ec f4       	brge	.+58     	; 0x584 <_ZN6Serial5sendfEPKcz+0x76>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 54a:	f8 01       	movw	r30, r16
 54c:	90 81       	ld	r25, Z
 54e:	99 23       	and	r25, r25
 550:	59 f0       	breq	.+22     	; 0x568 <_ZN6Serial5sendfEPKcz+0x5a>
 552:	f8 01       	movw	r30, r16
 554:	31 96       	adiw	r30, 0x01	; 1
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 556:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 55a:	85 ff       	sbrs	r24, 5
 55c:	fc cf       	rjmp	.-8      	; 0x556 <_ZN6Serial5sendfEPKcz+0x48>
		;
	UDR0 = data;
 55e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 562:	91 91       	ld	r25, Z+
 564:	91 11       	cpse	r25, r1
 566:	f7 cf       	rjmp	.-18     	; 0x556 <_ZN6Serial5sendfEPKcz+0x48>
		str = (char*)malloc(size);
		vsprintf(str, format, vl);
	}
	
	send(str);
	free(str);
 568:	c8 01       	movw	r24, r16
 56a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <free>
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	bf 90       	pop	r11
 580:	af 90       	pop	r10
 582:	08 95       	ret
	va_list vl;
	va_start(vl,format);
	char *str = (char*)malloc(30);
	if(!((size = vsprintf(str, format, vl)) < 30))
	{
		free(str);
 584:	c8 01       	movw	r24, r16
 586:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <free>
		str = (char*)malloc(size);
 58a:	c5 01       	movw	r24, r10
 58c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <malloc>
 590:	8c 01       	movw	r16, r24
		vsprintf(str, format, vl);
 592:	a7 01       	movw	r20, r14
 594:	b6 01       	movw	r22, r12
 596:	0e 94 a8 04 	call	0x950	; 0x950 <vsprintf>
 59a:	d7 cf       	rjmp	.-82     	; 0x54a <_ZN6Serial5sendfEPKcz+0x3c>

0000059c <__divmodhi4>:
 59c:	97 fb       	bst	r25, 7
 59e:	07 2e       	mov	r0, r23
 5a0:	16 f4       	brtc	.+4      	; 0x5a6 <__divmodhi4+0xa>
 5a2:	00 94       	com	r0
 5a4:	07 d0       	rcall	.+14     	; 0x5b4 <__divmodhi4_neg1>
 5a6:	77 fd       	sbrc	r23, 7
 5a8:	09 d0       	rcall	.+18     	; 0x5bc <__divmodhi4_neg2>
 5aa:	0e 94 4d 03 	call	0x69a	; 0x69a <__udivmodhi4>
 5ae:	07 fc       	sbrc	r0, 7
 5b0:	05 d0       	rcall	.+10     	; 0x5bc <__divmodhi4_neg2>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__divmodhi4_exit>

000005b4 <__divmodhi4_neg1>:
 5b4:	90 95       	com	r25
 5b6:	81 95       	neg	r24
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__divmodhi4_neg2>:
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255

000005c2 <__divmodhi4_exit>:
 5c2:	08 95       	ret

000005c4 <__umoddi3>:
 5c4:	68 94       	set
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <__udivdi3_umoddi3>

000005c8 <__udivdi3>:
 5c8:	e8 94       	clt

000005ca <__udivdi3_umoddi3>:
 5ca:	8f 92       	push	r8
 5cc:	9f 92       	push	r9
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmod64>
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	9f 90       	pop	r9
 5dc:	8f 90       	pop	r8
 5de:	08 95       	ret

000005e0 <__udivmod64>:
 5e0:	88 24       	eor	r8, r8
 5e2:	99 24       	eor	r9, r9
 5e4:	f4 01       	movw	r30, r8
 5e6:	e4 01       	movw	r28, r8
 5e8:	b0 e4       	ldi	r27, 0x40	; 64
 5ea:	9f 93       	push	r25
 5ec:	aa 27       	eor	r26, r26
 5ee:	9a 15       	cp	r25, r10
 5f0:	8b 04       	cpc	r8, r11
 5f2:	9c 04       	cpc	r9, r12
 5f4:	ed 05       	cpc	r30, r13
 5f6:	fe 05       	cpc	r31, r14
 5f8:	cf 05       	cpc	r28, r15
 5fa:	d0 07       	cpc	r29, r16
 5fc:	a1 07       	cpc	r26, r17
 5fe:	98 f4       	brcc	.+38     	; 0x626 <__udivmod64+0x46>
 600:	ad 2f       	mov	r26, r29
 602:	dc 2f       	mov	r29, r28
 604:	cf 2f       	mov	r28, r31
 606:	fe 2f       	mov	r31, r30
 608:	e9 2d       	mov	r30, r9
 60a:	98 2c       	mov	r9, r8
 60c:	89 2e       	mov	r8, r25
 60e:	98 2f       	mov	r25, r24
 610:	87 2f       	mov	r24, r23
 612:	76 2f       	mov	r23, r22
 614:	65 2f       	mov	r22, r21
 616:	54 2f       	mov	r21, r20
 618:	43 2f       	mov	r20, r19
 61a:	32 2f       	mov	r19, r18
 61c:	22 27       	eor	r18, r18
 61e:	b8 50       	subi	r27, 0x08	; 8
 620:	31 f7       	brne	.-52     	; 0x5ee <__udivmod64+0xe>
 622:	bf 91       	pop	r27
 624:	27 c0       	rjmp	.+78     	; 0x674 <__udivmod64+0x94>
 626:	1b 2e       	mov	r1, r27
 628:	bf 91       	pop	r27
 62a:	bb 27       	eor	r27, r27
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	44 1f       	adc	r20, r20
 632:	55 1f       	adc	r21, r21
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 1c       	adc	r8, r8
 63e:	99 1c       	adc	r9, r9
 640:	ee 1f       	adc	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	cc 1f       	adc	r28, r28
 646:	dd 1f       	adc	r29, r29
 648:	aa 1f       	adc	r26, r26
 64a:	bb 1f       	adc	r27, r27
 64c:	8a 14       	cp	r8, r10
 64e:	9b 04       	cpc	r9, r11
 650:	ec 05       	cpc	r30, r12
 652:	fd 05       	cpc	r31, r13
 654:	ce 05       	cpc	r28, r14
 656:	df 05       	cpc	r29, r15
 658:	a0 07       	cpc	r26, r16
 65a:	b1 07       	cpc	r27, r17
 65c:	48 f0       	brcs	.+18     	; 0x670 <__udivmod64+0x90>
 65e:	8a 18       	sub	r8, r10
 660:	9b 08       	sbc	r9, r11
 662:	ec 09       	sbc	r30, r12
 664:	fd 09       	sbc	r31, r13
 666:	ce 09       	sbc	r28, r14
 668:	df 09       	sbc	r29, r15
 66a:	a0 0b       	sbc	r26, r16
 66c:	b1 0b       	sbc	r27, r17
 66e:	21 60       	ori	r18, 0x01	; 1
 670:	1a 94       	dec	r1
 672:	e1 f6       	brne	.-72     	; 0x62c <__udivmod64+0x4c>
 674:	2e f4       	brtc	.+10     	; 0x680 <__udivmod64+0xa0>
 676:	94 01       	movw	r18, r8
 678:	af 01       	movw	r20, r30
 67a:	be 01       	movw	r22, r28
 67c:	cd 01       	movw	r24, r26
 67e:	00 0c       	add	r0, r0
 680:	08 95       	ret

00000682 <__adddi3_s8>:
 682:	00 24       	eor	r0, r0
 684:	a7 fd       	sbrc	r26, 7
 686:	00 94       	com	r0
 688:	2a 0f       	add	r18, r26
 68a:	30 1d       	adc	r19, r0
 68c:	40 1d       	adc	r20, r0
 68e:	50 1d       	adc	r21, r0
 690:	60 1d       	adc	r22, r0
 692:	70 1d       	adc	r23, r0
 694:	80 1d       	adc	r24, r0
 696:	90 1d       	adc	r25, r0
 698:	08 95       	ret

0000069a <__udivmodhi4>:
 69a:	aa 1b       	sub	r26, r26
 69c:	bb 1b       	sub	r27, r27
 69e:	51 e1       	ldi	r21, 0x11	; 17
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <__udivmodhi4_ep>

000006a2 <__udivmodhi4_loop>:
 6a2:	aa 1f       	adc	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	a6 17       	cp	r26, r22
 6a8:	b7 07       	cpc	r27, r23
 6aa:	10 f0       	brcs	.+4      	; 0x6b0 <__udivmodhi4_ep>
 6ac:	a6 1b       	sub	r26, r22
 6ae:	b7 0b       	sbc	r27, r23

000006b0 <__udivmodhi4_ep>:
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	5a 95       	dec	r21
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__udivmodhi4_loop>
 6b8:	80 95       	com	r24
 6ba:	90 95       	com	r25
 6bc:	bc 01       	movw	r22, r24
 6be:	cd 01       	movw	r24, r26
 6c0:	08 95       	ret

000006c2 <malloc>:
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	91 05       	cpc	r25, r1
 6ce:	10 f4       	brcc	.+4      	; 0x6d4 <malloc+0x12>
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <__flp>
 6d8:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <__flp+0x1>
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	a0 e0       	ldi	r26, 0x00	; 0
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	30 97       	sbiw	r30, 0x00	; 0
 6e6:	19 f1       	breq	.+70     	; 0x72e <malloc+0x6c>
 6e8:	40 81       	ld	r20, Z
 6ea:	51 81       	ldd	r21, Z+1	; 0x01
 6ec:	02 81       	ldd	r16, Z+2	; 0x02
 6ee:	13 81       	ldd	r17, Z+3	; 0x03
 6f0:	48 17       	cp	r20, r24
 6f2:	59 07       	cpc	r21, r25
 6f4:	c8 f0       	brcs	.+50     	; 0x728 <malloc+0x66>
 6f6:	84 17       	cp	r24, r20
 6f8:	95 07       	cpc	r25, r21
 6fa:	69 f4       	brne	.+26     	; 0x716 <malloc+0x54>
 6fc:	10 97       	sbiw	r26, 0x00	; 0
 6fe:	31 f0       	breq	.+12     	; 0x70c <malloc+0x4a>
 700:	12 96       	adiw	r26, 0x02	; 2
 702:	0c 93       	st	X, r16
 704:	12 97       	sbiw	r26, 0x02	; 2
 706:	13 96       	adiw	r26, 0x03	; 3
 708:	1c 93       	st	X, r17
 70a:	27 c0       	rjmp	.+78     	; 0x75a <malloc+0x98>
 70c:	00 93 9d 01 	sts	0x019D, r16	; 0x80019d <__flp>
 710:	10 93 9e 01 	sts	0x019E, r17	; 0x80019e <__flp+0x1>
 714:	22 c0       	rjmp	.+68     	; 0x75a <malloc+0x98>
 716:	21 15       	cp	r18, r1
 718:	31 05       	cpc	r19, r1
 71a:	19 f0       	breq	.+6      	; 0x722 <malloc+0x60>
 71c:	42 17       	cp	r20, r18
 71e:	53 07       	cpc	r21, r19
 720:	18 f4       	brcc	.+6      	; 0x728 <malloc+0x66>
 722:	9a 01       	movw	r18, r20
 724:	bd 01       	movw	r22, r26
 726:	ef 01       	movw	r28, r30
 728:	df 01       	movw	r26, r30
 72a:	f8 01       	movw	r30, r16
 72c:	db cf       	rjmp	.-74     	; 0x6e4 <malloc+0x22>
 72e:	21 15       	cp	r18, r1
 730:	31 05       	cpc	r19, r1
 732:	f9 f0       	breq	.+62     	; 0x772 <malloc+0xb0>
 734:	28 1b       	sub	r18, r24
 736:	39 0b       	sbc	r19, r25
 738:	24 30       	cpi	r18, 0x04	; 4
 73a:	31 05       	cpc	r19, r1
 73c:	80 f4       	brcc	.+32     	; 0x75e <malloc+0x9c>
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	9b 81       	ldd	r25, Y+3	; 0x03
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	21 f0       	breq	.+8      	; 0x750 <malloc+0x8e>
 748:	fb 01       	movw	r30, r22
 74a:	93 83       	std	Z+3, r25	; 0x03
 74c:	82 83       	std	Z+2, r24	; 0x02
 74e:	04 c0       	rjmp	.+8      	; 0x758 <malloc+0x96>
 750:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <__flp+0x1>
 754:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <__flp>
 758:	fe 01       	movw	r30, r28
 75a:	32 96       	adiw	r30, 0x02	; 2
 75c:	44 c0       	rjmp	.+136    	; 0x7e6 <malloc+0x124>
 75e:	fe 01       	movw	r30, r28
 760:	e2 0f       	add	r30, r18
 762:	f3 1f       	adc	r31, r19
 764:	81 93       	st	Z+, r24
 766:	91 93       	st	Z+, r25
 768:	22 50       	subi	r18, 0x02	; 2
 76a:	31 09       	sbc	r19, r1
 76c:	39 83       	std	Y+1, r19	; 0x01
 76e:	28 83       	st	Y, r18
 770:	3a c0       	rjmp	.+116    	; 0x7e6 <malloc+0x124>
 772:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <__brkval>
 776:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <__brkval+0x1>
 77a:	23 2b       	or	r18, r19
 77c:	41 f4       	brne	.+16     	; 0x78e <malloc+0xcc>
 77e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 782:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 786:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <__brkval+0x1>
 78a:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <__brkval>
 78e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 792:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 796:	21 15       	cp	r18, r1
 798:	31 05       	cpc	r19, r1
 79a:	41 f4       	brne	.+16     	; 0x7ac <malloc+0xea>
 79c:	2d b7       	in	r18, 0x3d	; 61
 79e:	3e b7       	in	r19, 0x3e	; 62
 7a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7a8:	24 1b       	sub	r18, r20
 7aa:	35 0b       	sbc	r19, r21
 7ac:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <__brkval>
 7b0:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <__brkval+0x1>
 7b4:	e2 17       	cp	r30, r18
 7b6:	f3 07       	cpc	r31, r19
 7b8:	a0 f4       	brcc	.+40     	; 0x7e2 <malloc+0x120>
 7ba:	2e 1b       	sub	r18, r30
 7bc:	3f 0b       	sbc	r19, r31
 7be:	28 17       	cp	r18, r24
 7c0:	39 07       	cpc	r19, r25
 7c2:	78 f0       	brcs	.+30     	; 0x7e2 <malloc+0x120>
 7c4:	ac 01       	movw	r20, r24
 7c6:	4e 5f       	subi	r20, 0xFE	; 254
 7c8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ca:	24 17       	cp	r18, r20
 7cc:	35 07       	cpc	r19, r21
 7ce:	48 f0       	brcs	.+18     	; 0x7e2 <malloc+0x120>
 7d0:	4e 0f       	add	r20, r30
 7d2:	5f 1f       	adc	r21, r31
 7d4:	50 93 9c 01 	sts	0x019C, r21	; 0x80019c <__brkval+0x1>
 7d8:	40 93 9b 01 	sts	0x019B, r20	; 0x80019b <__brkval>
 7dc:	81 93       	st	Z+, r24
 7de:	91 93       	st	Z+, r25
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <malloc+0x124>
 7e2:	e0 e0       	ldi	r30, 0x00	; 0
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	cf 01       	movw	r24, r30
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	08 95       	ret

000007f2 <free>:
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	09 f4       	brne	.+2      	; 0x7fc <free+0xa>
 7fa:	81 c0       	rjmp	.+258    	; 0x8fe <free+0x10c>
 7fc:	fc 01       	movw	r30, r24
 7fe:	32 97       	sbiw	r30, 0x02	; 2
 800:	13 82       	std	Z+3, r1	; 0x03
 802:	12 82       	std	Z+2, r1	; 0x02
 804:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <__flp>
 808:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <__flp+0x1>
 80c:	10 97       	sbiw	r26, 0x00	; 0
 80e:	81 f4       	brne	.+32     	; 0x830 <free+0x3e>
 810:	20 81       	ld	r18, Z
 812:	31 81       	ldd	r19, Z+1	; 0x01
 814:	82 0f       	add	r24, r18
 816:	93 1f       	adc	r25, r19
 818:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <__brkval>
 81c:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <__brkval+0x1>
 820:	28 17       	cp	r18, r24
 822:	39 07       	cpc	r19, r25
 824:	51 f5       	brne	.+84     	; 0x87a <free+0x88>
 826:	f0 93 9c 01 	sts	0x019C, r31	; 0x80019c <__brkval+0x1>
 82a:	e0 93 9b 01 	sts	0x019B, r30	; 0x80019b <__brkval>
 82e:	67 c0       	rjmp	.+206    	; 0x8fe <free+0x10c>
 830:	ed 01       	movw	r28, r26
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	ce 17       	cp	r28, r30
 838:	df 07       	cpc	r29, r31
 83a:	40 f4       	brcc	.+16     	; 0x84c <free+0x5a>
 83c:	4a 81       	ldd	r20, Y+2	; 0x02
 83e:	5b 81       	ldd	r21, Y+3	; 0x03
 840:	9e 01       	movw	r18, r28
 842:	41 15       	cp	r20, r1
 844:	51 05       	cpc	r21, r1
 846:	f1 f0       	breq	.+60     	; 0x884 <free+0x92>
 848:	ea 01       	movw	r28, r20
 84a:	f5 cf       	rjmp	.-22     	; 0x836 <free+0x44>
 84c:	d3 83       	std	Z+3, r29	; 0x03
 84e:	c2 83       	std	Z+2, r28	; 0x02
 850:	40 81       	ld	r20, Z
 852:	51 81       	ldd	r21, Z+1	; 0x01
 854:	84 0f       	add	r24, r20
 856:	95 1f       	adc	r25, r21
 858:	c8 17       	cp	r28, r24
 85a:	d9 07       	cpc	r29, r25
 85c:	59 f4       	brne	.+22     	; 0x874 <free+0x82>
 85e:	88 81       	ld	r24, Y
 860:	99 81       	ldd	r25, Y+1	; 0x01
 862:	84 0f       	add	r24, r20
 864:	95 1f       	adc	r25, r21
 866:	02 96       	adiw	r24, 0x02	; 2
 868:	91 83       	std	Z+1, r25	; 0x01
 86a:	80 83       	st	Z, r24
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	9b 81       	ldd	r25, Y+3	; 0x03
 870:	93 83       	std	Z+3, r25	; 0x03
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	21 15       	cp	r18, r1
 876:	31 05       	cpc	r19, r1
 878:	29 f4       	brne	.+10     	; 0x884 <free+0x92>
 87a:	f0 93 9e 01 	sts	0x019E, r31	; 0x80019e <__flp+0x1>
 87e:	e0 93 9d 01 	sts	0x019D, r30	; 0x80019d <__flp>
 882:	3d c0       	rjmp	.+122    	; 0x8fe <free+0x10c>
 884:	e9 01       	movw	r28, r18
 886:	fb 83       	std	Y+3, r31	; 0x03
 888:	ea 83       	std	Y+2, r30	; 0x02
 88a:	49 91       	ld	r20, Y+
 88c:	59 91       	ld	r21, Y+
 88e:	c4 0f       	add	r28, r20
 890:	d5 1f       	adc	r29, r21
 892:	ec 17       	cp	r30, r28
 894:	fd 07       	cpc	r31, r29
 896:	61 f4       	brne	.+24     	; 0x8b0 <free+0xbe>
 898:	80 81       	ld	r24, Z
 89a:	91 81       	ldd	r25, Z+1	; 0x01
 89c:	84 0f       	add	r24, r20
 89e:	95 1f       	adc	r25, r21
 8a0:	02 96       	adiw	r24, 0x02	; 2
 8a2:	e9 01       	movw	r28, r18
 8a4:	99 83       	std	Y+1, r25	; 0x01
 8a6:	88 83       	st	Y, r24
 8a8:	82 81       	ldd	r24, Z+2	; 0x02
 8aa:	93 81       	ldd	r25, Z+3	; 0x03
 8ac:	9b 83       	std	Y+3, r25	; 0x03
 8ae:	8a 83       	std	Y+2, r24	; 0x02
 8b0:	e0 e0       	ldi	r30, 0x00	; 0
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	12 96       	adiw	r26, 0x02	; 2
 8b6:	8d 91       	ld	r24, X+
 8b8:	9c 91       	ld	r25, X
 8ba:	13 97       	sbiw	r26, 0x03	; 3
 8bc:	00 97       	sbiw	r24, 0x00	; 0
 8be:	19 f0       	breq	.+6      	; 0x8c6 <free+0xd4>
 8c0:	fd 01       	movw	r30, r26
 8c2:	dc 01       	movw	r26, r24
 8c4:	f7 cf       	rjmp	.-18     	; 0x8b4 <free+0xc2>
 8c6:	8d 91       	ld	r24, X+
 8c8:	9c 91       	ld	r25, X
 8ca:	11 97       	sbiw	r26, 0x01	; 1
 8cc:	9d 01       	movw	r18, r26
 8ce:	2e 5f       	subi	r18, 0xFE	; 254
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	82 0f       	add	r24, r18
 8d4:	93 1f       	adc	r25, r19
 8d6:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <__brkval>
 8da:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <__brkval+0x1>
 8de:	28 17       	cp	r18, r24
 8e0:	39 07       	cpc	r19, r25
 8e2:	69 f4       	brne	.+26     	; 0x8fe <free+0x10c>
 8e4:	30 97       	sbiw	r30, 0x00	; 0
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <free+0x100>
 8e8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__flp+0x1>
 8ec:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <__flp>
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <free+0x104>
 8f2:	13 82       	std	Z+3, r1	; 0x03
 8f4:	12 82       	std	Z+2, r1	; 0x02
 8f6:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <__brkval+0x1>
 8fa:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <__brkval>
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <atoi>:
 904:	fc 01       	movw	r30, r24
 906:	88 27       	eor	r24, r24
 908:	99 27       	eor	r25, r25
 90a:	e8 94       	clt
 90c:	21 91       	ld	r18, Z+
 90e:	20 32       	cpi	r18, 0x20	; 32
 910:	e9 f3       	breq	.-6      	; 0x90c <atoi+0x8>
 912:	29 30       	cpi	r18, 0x09	; 9
 914:	10 f0       	brcs	.+4      	; 0x91a <atoi+0x16>
 916:	2e 30       	cpi	r18, 0x0E	; 14
 918:	c8 f3       	brcs	.-14     	; 0x90c <atoi+0x8>
 91a:	2b 32       	cpi	r18, 0x2B	; 43
 91c:	41 f0       	breq	.+16     	; 0x92e <atoi+0x2a>
 91e:	2d 32       	cpi	r18, 0x2D	; 45
 920:	39 f4       	brne	.+14     	; 0x930 <atoi+0x2c>
 922:	68 94       	set
 924:	04 c0       	rjmp	.+8      	; 0x92e <atoi+0x2a>
 926:	0e 94 a0 04 	call	0x940	; 0x940 <__mulhi_const_10>
 92a:	82 0f       	add	r24, r18
 92c:	91 1d       	adc	r25, r1
 92e:	21 91       	ld	r18, Z+
 930:	20 53       	subi	r18, 0x30	; 48
 932:	2a 30       	cpi	r18, 0x0A	; 10
 934:	c0 f3       	brcs	.-16     	; 0x926 <atoi+0x22>
 936:	1e f4       	brtc	.+6      	; 0x93e <atoi+0x3a>
 938:	90 95       	com	r25
 93a:	81 95       	neg	r24
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <__mulhi_const_10>:
 940:	7a e0       	ldi	r23, 0x0A	; 10
 942:	97 9f       	mul	r25, r23
 944:	90 2d       	mov	r25, r0
 946:	87 9f       	mul	r24, r23
 948:	80 2d       	mov	r24, r0
 94a:	91 0d       	add	r25, r1
 94c:	11 24       	eor	r1, r1
 94e:	08 95       	ret

00000950 <vsprintf>:
 950:	ae e0       	ldi	r26, 0x0E	; 14
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	ee ea       	ldi	r30, 0xAE	; 174
 956:	f4 e0       	ldi	r31, 0x04	; 4
 958:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__prologue_saves__+0x1c>
 95c:	8c 01       	movw	r16, r24
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	8c 83       	std	Y+4, r24	; 0x04
 962:	1a 83       	std	Y+2, r17	; 0x02
 964:	09 83       	std	Y+1, r16	; 0x01
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f e7       	ldi	r25, 0x7F	; 127
 96a:	9e 83       	std	Y+6, r25	; 0x06
 96c:	8d 83       	std	Y+5, r24	; 0x05
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 c4 04 	call	0x988	; 0x988 <vfprintf>
 976:	ef 81       	ldd	r30, Y+7	; 0x07
 978:	f8 85       	ldd	r31, Y+8	; 0x08
 97a:	e0 0f       	add	r30, r16
 97c:	f1 1f       	adc	r31, r17
 97e:	10 82       	st	Z, r1
 980:	2e 96       	adiw	r28, 0x0e	; 14
 982:	e4 e0       	ldi	r30, 0x04	; 4
 984:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__epilogue_restores__+0x1c>

00000988 <vfprintf>:
 988:	ab e0       	ldi	r26, 0x0B	; 11
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	ea ec       	ldi	r30, 0xCA	; 202
 98e:	f4 e0       	ldi	r31, 0x04	; 4
 990:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__prologue_saves__>
 994:	6c 01       	movw	r12, r24
 996:	7b 01       	movw	r14, r22
 998:	8a 01       	movw	r16, r20
 99a:	fc 01       	movw	r30, r24
 99c:	17 82       	std	Z+7, r1	; 0x07
 99e:	16 82       	std	Z+6, r1	; 0x06
 9a0:	83 81       	ldd	r24, Z+3	; 0x03
 9a2:	81 ff       	sbrs	r24, 1
 9a4:	cc c1       	rjmp	.+920    	; 0xd3e <vfprintf+0x3b6>
 9a6:	ce 01       	movw	r24, r28
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	3c 01       	movw	r6, r24
 9ac:	f6 01       	movw	r30, r12
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	f7 01       	movw	r30, r14
 9b2:	93 fd       	sbrc	r25, 3
 9b4:	85 91       	lpm	r24, Z+
 9b6:	93 ff       	sbrs	r25, 3
 9b8:	81 91       	ld	r24, Z+
 9ba:	7f 01       	movw	r14, r30
 9bc:	88 23       	and	r24, r24
 9be:	09 f4       	brne	.+2      	; 0x9c2 <vfprintf+0x3a>
 9c0:	ba c1       	rjmp	.+884    	; 0xd36 <vfprintf+0x3ae>
 9c2:	85 32       	cpi	r24, 0x25	; 37
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <vfprintf+0x4c>
 9c6:	93 fd       	sbrc	r25, 3
 9c8:	85 91       	lpm	r24, Z+
 9ca:	93 ff       	sbrs	r25, 3
 9cc:	81 91       	ld	r24, Z+
 9ce:	7f 01       	movw	r14, r30
 9d0:	85 32       	cpi	r24, 0x25	; 37
 9d2:	29 f4       	brne	.+10     	; 0x9de <vfprintf+0x56>
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 9dc:	e7 cf       	rjmp	.-50     	; 0x9ac <vfprintf+0x24>
 9de:	91 2c       	mov	r9, r1
 9e0:	21 2c       	mov	r2, r1
 9e2:	31 2c       	mov	r3, r1
 9e4:	ff e1       	ldi	r31, 0x1F	; 31
 9e6:	f3 15       	cp	r31, r3
 9e8:	d8 f0       	brcs	.+54     	; 0xa20 <vfprintf+0x98>
 9ea:	8b 32       	cpi	r24, 0x2B	; 43
 9ec:	79 f0       	breq	.+30     	; 0xa0c <vfprintf+0x84>
 9ee:	38 f4       	brcc	.+14     	; 0x9fe <vfprintf+0x76>
 9f0:	80 32       	cpi	r24, 0x20	; 32
 9f2:	79 f0       	breq	.+30     	; 0xa12 <vfprintf+0x8a>
 9f4:	83 32       	cpi	r24, 0x23	; 35
 9f6:	a1 f4       	brne	.+40     	; 0xa20 <vfprintf+0x98>
 9f8:	23 2d       	mov	r18, r3
 9fa:	20 61       	ori	r18, 0x10	; 16
 9fc:	1d c0       	rjmp	.+58     	; 0xa38 <vfprintf+0xb0>
 9fe:	8d 32       	cpi	r24, 0x2D	; 45
 a00:	61 f0       	breq	.+24     	; 0xa1a <vfprintf+0x92>
 a02:	80 33       	cpi	r24, 0x30	; 48
 a04:	69 f4       	brne	.+26     	; 0xa20 <vfprintf+0x98>
 a06:	23 2d       	mov	r18, r3
 a08:	21 60       	ori	r18, 0x01	; 1
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <vfprintf+0xb0>
 a0c:	83 2d       	mov	r24, r3
 a0e:	82 60       	ori	r24, 0x02	; 2
 a10:	38 2e       	mov	r3, r24
 a12:	e3 2d       	mov	r30, r3
 a14:	e4 60       	ori	r30, 0x04	; 4
 a16:	3e 2e       	mov	r3, r30
 a18:	2a c0       	rjmp	.+84     	; 0xa6e <vfprintf+0xe6>
 a1a:	f3 2d       	mov	r31, r3
 a1c:	f8 60       	ori	r31, 0x08	; 8
 a1e:	1d c0       	rjmp	.+58     	; 0xa5a <vfprintf+0xd2>
 a20:	37 fc       	sbrc	r3, 7
 a22:	2d c0       	rjmp	.+90     	; 0xa7e <vfprintf+0xf6>
 a24:	20 ed       	ldi	r18, 0xD0	; 208
 a26:	28 0f       	add	r18, r24
 a28:	2a 30       	cpi	r18, 0x0A	; 10
 a2a:	40 f0       	brcs	.+16     	; 0xa3c <vfprintf+0xb4>
 a2c:	8e 32       	cpi	r24, 0x2E	; 46
 a2e:	b9 f4       	brne	.+46     	; 0xa5e <vfprintf+0xd6>
 a30:	36 fc       	sbrc	r3, 6
 a32:	81 c1       	rjmp	.+770    	; 0xd36 <vfprintf+0x3ae>
 a34:	23 2d       	mov	r18, r3
 a36:	20 64       	ori	r18, 0x40	; 64
 a38:	32 2e       	mov	r3, r18
 a3a:	19 c0       	rjmp	.+50     	; 0xa6e <vfprintf+0xe6>
 a3c:	36 fe       	sbrs	r3, 6
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0xc4>
 a40:	8a e0       	ldi	r24, 0x0A	; 10
 a42:	98 9e       	mul	r9, r24
 a44:	20 0d       	add	r18, r0
 a46:	11 24       	eor	r1, r1
 a48:	92 2e       	mov	r9, r18
 a4a:	11 c0       	rjmp	.+34     	; 0xa6e <vfprintf+0xe6>
 a4c:	ea e0       	ldi	r30, 0x0A	; 10
 a4e:	2e 9e       	mul	r2, r30
 a50:	20 0d       	add	r18, r0
 a52:	11 24       	eor	r1, r1
 a54:	22 2e       	mov	r2, r18
 a56:	f3 2d       	mov	r31, r3
 a58:	f0 62       	ori	r31, 0x20	; 32
 a5a:	3f 2e       	mov	r3, r31
 a5c:	08 c0       	rjmp	.+16     	; 0xa6e <vfprintf+0xe6>
 a5e:	8c 36       	cpi	r24, 0x6C	; 108
 a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0xe2>
 a62:	83 2d       	mov	r24, r3
 a64:	80 68       	ori	r24, 0x80	; 128
 a66:	38 2e       	mov	r3, r24
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0xe6>
 a6a:	88 36       	cpi	r24, 0x68	; 104
 a6c:	41 f4       	brne	.+16     	; 0xa7e <vfprintf+0xf6>
 a6e:	f7 01       	movw	r30, r14
 a70:	93 fd       	sbrc	r25, 3
 a72:	85 91       	lpm	r24, Z+
 a74:	93 ff       	sbrs	r25, 3
 a76:	81 91       	ld	r24, Z+
 a78:	7f 01       	movw	r14, r30
 a7a:	81 11       	cpse	r24, r1
 a7c:	b3 cf       	rjmp	.-154    	; 0x9e4 <vfprintf+0x5c>
 a7e:	98 2f       	mov	r25, r24
 a80:	9f 7d       	andi	r25, 0xDF	; 223
 a82:	95 54       	subi	r25, 0x45	; 69
 a84:	93 30       	cpi	r25, 0x03	; 3
 a86:	28 f4       	brcc	.+10     	; 0xa92 <vfprintf+0x10a>
 a88:	0c 5f       	subi	r16, 0xFC	; 252
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	9f e3       	ldi	r25, 0x3F	; 63
 a8e:	99 83       	std	Y+1, r25	; 0x01
 a90:	0d c0       	rjmp	.+26     	; 0xaac <vfprintf+0x124>
 a92:	83 36       	cpi	r24, 0x63	; 99
 a94:	31 f0       	breq	.+12     	; 0xaa2 <vfprintf+0x11a>
 a96:	83 37       	cpi	r24, 0x73	; 115
 a98:	71 f0       	breq	.+28     	; 0xab6 <vfprintf+0x12e>
 a9a:	83 35       	cpi	r24, 0x53	; 83
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <vfprintf+0x118>
 a9e:	59 c0       	rjmp	.+178    	; 0xb52 <vfprintf+0x1ca>
 aa0:	21 c0       	rjmp	.+66     	; 0xae4 <vfprintf+0x15c>
 aa2:	f8 01       	movw	r30, r16
 aa4:	80 81       	ld	r24, Z
 aa6:	89 83       	std	Y+1, r24	; 0x01
 aa8:	0e 5f       	subi	r16, 0xFE	; 254
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	88 24       	eor	r8, r8
 aae:	83 94       	inc	r8
 ab0:	91 2c       	mov	r9, r1
 ab2:	53 01       	movw	r10, r6
 ab4:	13 c0       	rjmp	.+38     	; 0xadc <vfprintf+0x154>
 ab6:	28 01       	movw	r4, r16
 ab8:	f2 e0       	ldi	r31, 0x02	; 2
 aba:	4f 0e       	add	r4, r31
 abc:	51 1c       	adc	r5, r1
 abe:	f8 01       	movw	r30, r16
 ac0:	a0 80       	ld	r10, Z
 ac2:	b1 80       	ldd	r11, Z+1	; 0x01
 ac4:	36 fe       	sbrs	r3, 6
 ac6:	03 c0       	rjmp	.+6      	; 0xace <vfprintf+0x146>
 ac8:	69 2d       	mov	r22, r9
 aca:	70 e0       	ldi	r23, 0x00	; 0
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <vfprintf+0x14a>
 ace:	6f ef       	ldi	r22, 0xFF	; 255
 ad0:	7f ef       	ldi	r23, 0xFF	; 255
 ad2:	c5 01       	movw	r24, r10
 ad4:	0e 94 b0 06 	call	0xd60	; 0xd60 <strnlen>
 ad8:	4c 01       	movw	r8, r24
 ada:	82 01       	movw	r16, r4
 adc:	f3 2d       	mov	r31, r3
 ade:	ff 77       	andi	r31, 0x7F	; 127
 ae0:	3f 2e       	mov	r3, r31
 ae2:	16 c0       	rjmp	.+44     	; 0xb10 <vfprintf+0x188>
 ae4:	28 01       	movw	r4, r16
 ae6:	22 e0       	ldi	r18, 0x02	; 2
 ae8:	42 0e       	add	r4, r18
 aea:	51 1c       	adc	r5, r1
 aec:	f8 01       	movw	r30, r16
 aee:	a0 80       	ld	r10, Z
 af0:	b1 80       	ldd	r11, Z+1	; 0x01
 af2:	36 fe       	sbrs	r3, 6
 af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x174>
 af6:	69 2d       	mov	r22, r9
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x178>
 afc:	6f ef       	ldi	r22, 0xFF	; 255
 afe:	7f ef       	ldi	r23, 0xFF	; 255
 b00:	c5 01       	movw	r24, r10
 b02:	0e 94 a5 06 	call	0xd4a	; 0xd4a <strnlen_P>
 b06:	4c 01       	movw	r8, r24
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 68       	ori	r31, 0x80	; 128
 b0c:	3f 2e       	mov	r3, r31
 b0e:	82 01       	movw	r16, r4
 b10:	33 fc       	sbrc	r3, 3
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <vfprintf+0x1c2>
 b14:	82 2d       	mov	r24, r2
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	88 16       	cp	r8, r24
 b1a:	99 06       	cpc	r9, r25
 b1c:	b0 f4       	brcc	.+44     	; 0xb4a <vfprintf+0x1c2>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 b28:	2a 94       	dec	r2
 b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <vfprintf+0x18c>
 b2c:	f5 01       	movw	r30, r10
 b2e:	37 fc       	sbrc	r3, 7
 b30:	85 91       	lpm	r24, Z+
 b32:	37 fe       	sbrs	r3, 7
 b34:	81 91       	ld	r24, Z+
 b36:	5f 01       	movw	r10, r30
 b38:	b6 01       	movw	r22, r12
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 b40:	21 10       	cpse	r2, r1
 b42:	2a 94       	dec	r2
 b44:	21 e0       	ldi	r18, 0x01	; 1
 b46:	82 1a       	sub	r8, r18
 b48:	91 08       	sbc	r9, r1
 b4a:	81 14       	cp	r8, r1
 b4c:	91 04       	cpc	r9, r1
 b4e:	71 f7       	brne	.-36     	; 0xb2c <vfprintf+0x1a4>
 b50:	e8 c0       	rjmp	.+464    	; 0xd22 <vfprintf+0x39a>
 b52:	84 36       	cpi	r24, 0x64	; 100
 b54:	11 f0       	breq	.+4      	; 0xb5a <vfprintf+0x1d2>
 b56:	89 36       	cpi	r24, 0x69	; 105
 b58:	41 f5       	brne	.+80     	; 0xbaa <vfprintf+0x222>
 b5a:	f8 01       	movw	r30, r16
 b5c:	37 fe       	sbrs	r3, 7
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <vfprintf+0x1e6>
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	93 81       	ldd	r25, Z+3	; 0x03
 b68:	0c 5f       	subi	r16, 0xFC	; 252
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <vfprintf+0x1f6>
 b6e:	60 81       	ld	r22, Z
 b70:	71 81       	ldd	r23, Z+1	; 0x01
 b72:	07 2e       	mov	r0, r23
 b74:	00 0c       	add	r0, r0
 b76:	88 0b       	sbc	r24, r24
 b78:	99 0b       	sbc	r25, r25
 b7a:	0e 5f       	subi	r16, 0xFE	; 254
 b7c:	1f 4f       	sbci	r17, 0xFF	; 255
 b7e:	f3 2d       	mov	r31, r3
 b80:	ff 76       	andi	r31, 0x6F	; 111
 b82:	3f 2e       	mov	r3, r31
 b84:	97 ff       	sbrs	r25, 7
 b86:	09 c0       	rjmp	.+18     	; 0xb9a <vfprintf+0x212>
 b88:	90 95       	com	r25
 b8a:	80 95       	com	r24
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	f0 68       	ori	r31, 0x80	; 128
 b98:	3f 2e       	mov	r3, r31
 b9a:	2a e0       	ldi	r18, 0x0A	; 10
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	a3 01       	movw	r20, r6
 ba0:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 ba4:	88 2e       	mov	r8, r24
 ba6:	86 18       	sub	r8, r6
 ba8:	45 c0       	rjmp	.+138    	; 0xc34 <vfprintf+0x2ac>
 baa:	85 37       	cpi	r24, 0x75	; 117
 bac:	31 f4       	brne	.+12     	; 0xbba <vfprintf+0x232>
 bae:	23 2d       	mov	r18, r3
 bb0:	2f 7e       	andi	r18, 0xEF	; 239
 bb2:	b2 2e       	mov	r11, r18
 bb4:	2a e0       	ldi	r18, 0x0A	; 10
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	25 c0       	rjmp	.+74     	; 0xc04 <vfprintf+0x27c>
 bba:	93 2d       	mov	r25, r3
 bbc:	99 7f       	andi	r25, 0xF9	; 249
 bbe:	b9 2e       	mov	r11, r25
 bc0:	8f 36       	cpi	r24, 0x6F	; 111
 bc2:	c1 f0       	breq	.+48     	; 0xbf4 <vfprintf+0x26c>
 bc4:	18 f4       	brcc	.+6      	; 0xbcc <vfprintf+0x244>
 bc6:	88 35       	cpi	r24, 0x58	; 88
 bc8:	79 f0       	breq	.+30     	; 0xbe8 <vfprintf+0x260>
 bca:	b5 c0       	rjmp	.+362    	; 0xd36 <vfprintf+0x3ae>
 bcc:	80 37       	cpi	r24, 0x70	; 112
 bce:	19 f0       	breq	.+6      	; 0xbd6 <vfprintf+0x24e>
 bd0:	88 37       	cpi	r24, 0x78	; 120
 bd2:	21 f0       	breq	.+8      	; 0xbdc <vfprintf+0x254>
 bd4:	b0 c0       	rjmp	.+352    	; 0xd36 <vfprintf+0x3ae>
 bd6:	e9 2f       	mov	r30, r25
 bd8:	e0 61       	ori	r30, 0x10	; 16
 bda:	be 2e       	mov	r11, r30
 bdc:	b4 fe       	sbrs	r11, 4
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <vfprintf+0x272>
 be0:	fb 2d       	mov	r31, r11
 be2:	f4 60       	ori	r31, 0x04	; 4
 be4:	bf 2e       	mov	r11, r31
 be6:	09 c0       	rjmp	.+18     	; 0xbfa <vfprintf+0x272>
 be8:	34 fe       	sbrs	r3, 4
 bea:	0a c0       	rjmp	.+20     	; 0xc00 <vfprintf+0x278>
 bec:	29 2f       	mov	r18, r25
 bee:	26 60       	ori	r18, 0x06	; 6
 bf0:	b2 2e       	mov	r11, r18
 bf2:	06 c0       	rjmp	.+12     	; 0xc00 <vfprintf+0x278>
 bf4:	28 e0       	ldi	r18, 0x08	; 8
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	05 c0       	rjmp	.+10     	; 0xc04 <vfprintf+0x27c>
 bfa:	20 e1       	ldi	r18, 0x10	; 16
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x27c>
 c00:	20 e1       	ldi	r18, 0x10	; 16
 c02:	32 e0       	ldi	r19, 0x02	; 2
 c04:	f8 01       	movw	r30, r16
 c06:	b7 fe       	sbrs	r11, 7
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x290>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	0c 5f       	subi	r16, 0xFC	; 252
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x29c>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 5f       	subi	r16, 0xFE	; 254
 c22:	1f 4f       	sbci	r17, 0xFF	; 255
 c24:	a3 01       	movw	r20, r6
 c26:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 c2a:	88 2e       	mov	r8, r24
 c2c:	86 18       	sub	r8, r6
 c2e:	fb 2d       	mov	r31, r11
 c30:	ff 77       	andi	r31, 0x7F	; 127
 c32:	3f 2e       	mov	r3, r31
 c34:	36 fe       	sbrs	r3, 6
 c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x2ca>
 c38:	23 2d       	mov	r18, r3
 c3a:	2e 7f       	andi	r18, 0xFE	; 254
 c3c:	a2 2e       	mov	r10, r18
 c3e:	89 14       	cp	r8, r9
 c40:	58 f4       	brcc	.+22     	; 0xc58 <vfprintf+0x2d0>
 c42:	34 fe       	sbrs	r3, 4
 c44:	0b c0       	rjmp	.+22     	; 0xc5c <vfprintf+0x2d4>
 c46:	32 fc       	sbrc	r3, 2
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x2d4>
 c4a:	83 2d       	mov	r24, r3
 c4c:	8e 7e       	andi	r24, 0xEE	; 238
 c4e:	a8 2e       	mov	r10, r24
 c50:	05 c0       	rjmp	.+10     	; 0xc5c <vfprintf+0x2d4>
 c52:	b8 2c       	mov	r11, r8
 c54:	a3 2c       	mov	r10, r3
 c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x2d6>
 c58:	b8 2c       	mov	r11, r8
 c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vfprintf+0x2d6>
 c5c:	b9 2c       	mov	r11, r9
 c5e:	a4 fe       	sbrs	r10, 4
 c60:	0f c0       	rjmp	.+30     	; 0xc80 <vfprintf+0x2f8>
 c62:	fe 01       	movw	r30, r28
 c64:	e8 0d       	add	r30, r8
 c66:	f1 1d       	adc	r31, r1
 c68:	80 81       	ld	r24, Z
 c6a:	80 33       	cpi	r24, 0x30	; 48
 c6c:	21 f4       	brne	.+8      	; 0xc76 <vfprintf+0x2ee>
 c6e:	9a 2d       	mov	r25, r10
 c70:	99 7e       	andi	r25, 0xE9	; 233
 c72:	a9 2e       	mov	r10, r25
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x300>
 c76:	a2 fe       	sbrs	r10, 2
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x2fe>
 c7a:	b3 94       	inc	r11
 c7c:	b3 94       	inc	r11
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <vfprintf+0x300>
 c80:	8a 2d       	mov	r24, r10
 c82:	86 78       	andi	r24, 0x86	; 134
 c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x300>
 c86:	b3 94       	inc	r11
 c88:	a3 fc       	sbrc	r10, 3
 c8a:	11 c0       	rjmp	.+34     	; 0xcae <vfprintf+0x326>
 c8c:	a0 fe       	sbrs	r10, 0
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x314>
 c90:	b2 14       	cp	r11, r2
 c92:	88 f4       	brcc	.+34     	; 0xcb6 <vfprintf+0x32e>
 c94:	28 0c       	add	r2, r8
 c96:	92 2c       	mov	r9, r2
 c98:	9b 18       	sub	r9, r11
 c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <vfprintf+0x330>
 c9c:	b2 14       	cp	r11, r2
 c9e:	60 f4       	brcc	.+24     	; 0xcb8 <vfprintf+0x330>
 ca0:	b6 01       	movw	r22, r12
 ca2:	80 e2       	ldi	r24, 0x20	; 32
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 caa:	b3 94       	inc	r11
 cac:	f7 cf       	rjmp	.-18     	; 0xc9c <vfprintf+0x314>
 cae:	b2 14       	cp	r11, r2
 cb0:	18 f4       	brcc	.+6      	; 0xcb8 <vfprintf+0x330>
 cb2:	2b 18       	sub	r2, r11
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x332>
 cb6:	98 2c       	mov	r9, r8
 cb8:	21 2c       	mov	r2, r1
 cba:	a4 fe       	sbrs	r10, 4
 cbc:	10 c0       	rjmp	.+32     	; 0xcde <vfprintf+0x356>
 cbe:	b6 01       	movw	r22, r12
 cc0:	80 e3       	ldi	r24, 0x30	; 48
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 cc8:	a2 fe       	sbrs	r10, 2
 cca:	17 c0       	rjmp	.+46     	; 0xcfa <vfprintf+0x372>
 ccc:	a1 fc       	sbrc	r10, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x34e>
 cd0:	88 e7       	ldi	r24, 0x78	; 120
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x352>
 cd6:	88 e5       	ldi	r24, 0x58	; 88
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	b6 01       	movw	r22, r12
 cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <vfprintf+0x36e>
 cde:	8a 2d       	mov	r24, r10
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	59 f0       	breq	.+22     	; 0xcfa <vfprintf+0x372>
 ce4:	a1 fe       	sbrs	r10, 1
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x364>
 ce8:	8b e2       	ldi	r24, 0x2B	; 43
 cea:	01 c0       	rjmp	.+2      	; 0xcee <vfprintf+0x366>
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	a7 fc       	sbrc	r10, 7
 cf0:	8d e2       	ldi	r24, 0x2D	; 45
 cf2:	b6 01       	movw	r22, r12
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 cfa:	89 14       	cp	r8, r9
 cfc:	38 f4       	brcc	.+14     	; 0xd0c <vfprintf+0x384>
 cfe:	b6 01       	movw	r22, r12
 d00:	80 e3       	ldi	r24, 0x30	; 48
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d08:	9a 94       	dec	r9
 d0a:	f7 cf       	rjmp	.-18     	; 0xcfa <vfprintf+0x372>
 d0c:	8a 94       	dec	r8
 d0e:	f3 01       	movw	r30, r6
 d10:	e8 0d       	add	r30, r8
 d12:	f1 1d       	adc	r31, r1
 d14:	80 81       	ld	r24, Z
 d16:	b6 01       	movw	r22, r12
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d1e:	81 10       	cpse	r8, r1
 d20:	f5 cf       	rjmp	.-22     	; 0xd0c <vfprintf+0x384>
 d22:	22 20       	and	r2, r2
 d24:	09 f4       	brne	.+2      	; 0xd28 <vfprintf+0x3a0>
 d26:	42 ce       	rjmp	.-892    	; 0x9ac <vfprintf+0x24>
 d28:	b6 01       	movw	r22, r12
 d2a:	80 e2       	ldi	r24, 0x20	; 32
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d32:	2a 94       	dec	r2
 d34:	f6 cf       	rjmp	.-20     	; 0xd22 <vfprintf+0x39a>
 d36:	f6 01       	movw	r30, r12
 d38:	86 81       	ldd	r24, Z+6	; 0x06
 d3a:	97 81       	ldd	r25, Z+7	; 0x07
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x3ba>
 d3e:	8f ef       	ldi	r24, 0xFF	; 255
 d40:	9f ef       	ldi	r25, 0xFF	; 255
 d42:	2b 96       	adiw	r28, 0x0b	; 11
 d44:	e2 e1       	ldi	r30, 0x12	; 18
 d46:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__epilogue_restores__>

00000d4a <strnlen_P>:
 d4a:	fc 01       	movw	r30, r24
 d4c:	05 90       	lpm	r0, Z+
 d4e:	61 50       	subi	r22, 0x01	; 1
 d50:	70 40       	sbci	r23, 0x00	; 0
 d52:	01 10       	cpse	r0, r1
 d54:	d8 f7       	brcc	.-10     	; 0xd4c <strnlen_P+0x2>
 d56:	80 95       	com	r24
 d58:	90 95       	com	r25
 d5a:	8e 0f       	add	r24, r30
 d5c:	9f 1f       	adc	r25, r31
 d5e:	08 95       	ret

00000d60 <strnlen>:
 d60:	fc 01       	movw	r30, r24
 d62:	61 50       	subi	r22, 0x01	; 1
 d64:	70 40       	sbci	r23, 0x00	; 0
 d66:	01 90       	ld	r0, Z+
 d68:	01 10       	cpse	r0, r1
 d6a:	d8 f7       	brcc	.-10     	; 0xd62 <strnlen+0x2>
 d6c:	80 95       	com	r24
 d6e:	90 95       	com	r25
 d70:	8e 0f       	add	r24, r30
 d72:	9f 1f       	adc	r25, r31
 d74:	08 95       	ret

00000d76 <fputc>:
 d76:	0f 93       	push	r16
 d78:	1f 93       	push	r17
 d7a:	cf 93       	push	r28
 d7c:	df 93       	push	r29
 d7e:	fb 01       	movw	r30, r22
 d80:	23 81       	ldd	r18, Z+3	; 0x03
 d82:	21 fd       	sbrc	r18, 1
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <fputc+0x16>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	2c c0       	rjmp	.+88     	; 0xde4 <fputc+0x6e>
 d8c:	22 ff       	sbrs	r18, 2
 d8e:	16 c0       	rjmp	.+44     	; 0xdbc <fputc+0x46>
 d90:	46 81       	ldd	r20, Z+6	; 0x06
 d92:	57 81       	ldd	r21, Z+7	; 0x07
 d94:	24 81       	ldd	r18, Z+4	; 0x04
 d96:	35 81       	ldd	r19, Z+5	; 0x05
 d98:	42 17       	cp	r20, r18
 d9a:	53 07       	cpc	r21, r19
 d9c:	44 f4       	brge	.+16     	; 0xdae <fputc+0x38>
 d9e:	a0 81       	ld	r26, Z
 da0:	b1 81       	ldd	r27, Z+1	; 0x01
 da2:	9d 01       	movw	r18, r26
 da4:	2f 5f       	subi	r18, 0xFF	; 255
 da6:	3f 4f       	sbci	r19, 0xFF	; 255
 da8:	31 83       	std	Z+1, r19	; 0x01
 daa:	20 83       	st	Z, r18
 dac:	8c 93       	st	X, r24
 dae:	26 81       	ldd	r18, Z+6	; 0x06
 db0:	37 81       	ldd	r19, Z+7	; 0x07
 db2:	2f 5f       	subi	r18, 0xFF	; 255
 db4:	3f 4f       	sbci	r19, 0xFF	; 255
 db6:	37 83       	std	Z+7, r19	; 0x07
 db8:	26 83       	std	Z+6, r18	; 0x06
 dba:	14 c0       	rjmp	.+40     	; 0xde4 <fputc+0x6e>
 dbc:	8b 01       	movw	r16, r22
 dbe:	ec 01       	movw	r28, r24
 dc0:	fb 01       	movw	r30, r22
 dc2:	00 84       	ldd	r0, Z+8	; 0x08
 dc4:	f1 85       	ldd	r31, Z+9	; 0x09
 dc6:	e0 2d       	mov	r30, r0
 dc8:	09 95       	icall
 dca:	89 2b       	or	r24, r25
 dcc:	e1 f6       	brne	.-72     	; 0xd86 <fputc+0x10>
 dce:	d8 01       	movw	r26, r16
 dd0:	16 96       	adiw	r26, 0x06	; 6
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	17 97       	sbiw	r26, 0x07	; 7
 dd8:	01 96       	adiw	r24, 0x01	; 1
 dda:	17 96       	adiw	r26, 0x07	; 7
 ddc:	9c 93       	st	X, r25
 dde:	8e 93       	st	-X, r24
 de0:	16 97       	sbiw	r26, 0x06	; 6
 de2:	ce 01       	movw	r24, r28
 de4:	df 91       	pop	r29
 de6:	cf 91       	pop	r28
 de8:	1f 91       	pop	r17
 dea:	0f 91       	pop	r16
 dec:	08 95       	ret

00000dee <__ultoa_invert>:
 dee:	fa 01       	movw	r30, r20
 df0:	aa 27       	eor	r26, r26
 df2:	28 30       	cpi	r18, 0x08	; 8
 df4:	51 f1       	breq	.+84     	; 0xe4a <__ultoa_invert+0x5c>
 df6:	20 31       	cpi	r18, 0x10	; 16
 df8:	81 f1       	breq	.+96     	; 0xe5a <__ultoa_invert+0x6c>
 dfa:	e8 94       	clt
 dfc:	6f 93       	push	r22
 dfe:	6e 7f       	andi	r22, 0xFE	; 254
 e00:	6e 5f       	subi	r22, 0xFE	; 254
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	af 4f       	sbci	r26, 0xFF	; 255
 e0a:	b1 e0       	ldi	r27, 0x01	; 1
 e0c:	3e d0       	rcall	.+124    	; 0xe8a <__ultoa_invert+0x9c>
 e0e:	b4 e0       	ldi	r27, 0x04	; 4
 e10:	3c d0       	rcall	.+120    	; 0xe8a <__ultoa_invert+0x9c>
 e12:	67 0f       	add	r22, r23
 e14:	78 1f       	adc	r23, r24
 e16:	89 1f       	adc	r24, r25
 e18:	9a 1f       	adc	r25, r26
 e1a:	a1 1d       	adc	r26, r1
 e1c:	68 0f       	add	r22, r24
 e1e:	79 1f       	adc	r23, r25
 e20:	8a 1f       	adc	r24, r26
 e22:	91 1d       	adc	r25, r1
 e24:	a1 1d       	adc	r26, r1
 e26:	6a 0f       	add	r22, r26
 e28:	71 1d       	adc	r23, r1
 e2a:	81 1d       	adc	r24, r1
 e2c:	91 1d       	adc	r25, r1
 e2e:	a1 1d       	adc	r26, r1
 e30:	20 d0       	rcall	.+64     	; 0xe72 <__ultoa_invert+0x84>
 e32:	09 f4       	brne	.+2      	; 0xe36 <__ultoa_invert+0x48>
 e34:	68 94       	set
 e36:	3f 91       	pop	r19
 e38:	2a e0       	ldi	r18, 0x0A	; 10
 e3a:	26 9f       	mul	r18, r22
 e3c:	11 24       	eor	r1, r1
 e3e:	30 19       	sub	r19, r0
 e40:	30 5d       	subi	r19, 0xD0	; 208
 e42:	31 93       	st	Z+, r19
 e44:	de f6       	brtc	.-74     	; 0xdfc <__ultoa_invert+0xe>
 e46:	cf 01       	movw	r24, r30
 e48:	08 95       	ret
 e4a:	46 2f       	mov	r20, r22
 e4c:	47 70       	andi	r20, 0x07	; 7
 e4e:	40 5d       	subi	r20, 0xD0	; 208
 e50:	41 93       	st	Z+, r20
 e52:	b3 e0       	ldi	r27, 0x03	; 3
 e54:	0f d0       	rcall	.+30     	; 0xe74 <__ultoa_invert+0x86>
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x5c>
 e58:	f6 cf       	rjmp	.-20     	; 0xe46 <__ultoa_invert+0x58>
 e5a:	46 2f       	mov	r20, r22
 e5c:	4f 70       	andi	r20, 0x0F	; 15
 e5e:	40 5d       	subi	r20, 0xD0	; 208
 e60:	4a 33       	cpi	r20, 0x3A	; 58
 e62:	18 f0       	brcs	.+6      	; 0xe6a <__ultoa_invert+0x7c>
 e64:	49 5d       	subi	r20, 0xD9	; 217
 e66:	31 fd       	sbrc	r19, 1
 e68:	40 52       	subi	r20, 0x20	; 32
 e6a:	41 93       	st	Z+, r20
 e6c:	02 d0       	rcall	.+4      	; 0xe72 <__ultoa_invert+0x84>
 e6e:	a9 f7       	brne	.-22     	; 0xe5a <__ultoa_invert+0x6c>
 e70:	ea cf       	rjmp	.-44     	; 0xe46 <__ultoa_invert+0x58>
 e72:	b4 e0       	ldi	r27, 0x04	; 4
 e74:	a6 95       	lsr	r26
 e76:	97 95       	ror	r25
 e78:	87 95       	ror	r24
 e7a:	77 95       	ror	r23
 e7c:	67 95       	ror	r22
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0x86>
 e82:	00 97       	sbiw	r24, 0x00	; 0
 e84:	61 05       	cpc	r22, r1
 e86:	71 05       	cpc	r23, r1
 e88:	08 95       	ret
 e8a:	9b 01       	movw	r18, r22
 e8c:	ac 01       	movw	r20, r24
 e8e:	0a 2e       	mov	r0, r26
 e90:	06 94       	lsr	r0
 e92:	57 95       	ror	r21
 e94:	47 95       	ror	r20
 e96:	37 95       	ror	r19
 e98:	27 95       	ror	r18
 e9a:	ba 95       	dec	r27
 e9c:	c9 f7       	brne	.-14     	; 0xe90 <__ultoa_invert+0xa2>
 e9e:	62 0f       	add	r22, r18
 ea0:	73 1f       	adc	r23, r19
 ea2:	84 1f       	adc	r24, r20
 ea4:	95 1f       	adc	r25, r21
 ea6:	a0 1d       	adc	r26, r0
 ea8:	08 95       	ret

00000eaa <__prologue_saves__>:
 eaa:	2f 92       	push	r2
 eac:	3f 92       	push	r3
 eae:	4f 92       	push	r4
 eb0:	5f 92       	push	r5
 eb2:	6f 92       	push	r6
 eb4:	7f 92       	push	r7
 eb6:	8f 92       	push	r8
 eb8:	9f 92       	push	r9
 eba:	af 92       	push	r10
 ebc:	bf 92       	push	r11
 ebe:	cf 92       	push	r12
 ec0:	df 92       	push	r13
 ec2:	ef 92       	push	r14
 ec4:	ff 92       	push	r15
 ec6:	0f 93       	push	r16
 ec8:	1f 93       	push	r17
 eca:	cf 93       	push	r28
 ecc:	df 93       	push	r29
 ece:	cd b7       	in	r28, 0x3d	; 61
 ed0:	de b7       	in	r29, 0x3e	; 62
 ed2:	ca 1b       	sub	r28, r26
 ed4:	db 0b       	sbc	r29, r27
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	09 94       	ijmp

00000ee2 <__epilogue_restores__>:
 ee2:	2a 88       	ldd	r2, Y+18	; 0x12
 ee4:	39 88       	ldd	r3, Y+17	; 0x11
 ee6:	48 88       	ldd	r4, Y+16	; 0x10
 ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eea:	6e 84       	ldd	r6, Y+14	; 0x0e
 eec:	7d 84       	ldd	r7, Y+13	; 0x0d
 eee:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef4:	b9 84       	ldd	r11, Y+9	; 0x09
 ef6:	c8 84       	ldd	r12, Y+8	; 0x08
 ef8:	df 80       	ldd	r13, Y+7	; 0x07
 efa:	ee 80       	ldd	r14, Y+6	; 0x06
 efc:	fd 80       	ldd	r15, Y+5	; 0x05
 efe:	0c 81       	ldd	r16, Y+4	; 0x04
 f00:	1b 81       	ldd	r17, Y+3	; 0x03
 f02:	aa 81       	ldd	r26, Y+2	; 0x02
 f04:	b9 81       	ldd	r27, Y+1	; 0x01
 f06:	ce 0f       	add	r28, r30
 f08:	d1 1d       	adc	r29, r1
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	de bf       	out	0x3e, r29	; 62
 f10:	0f be       	out	0x3f, r0	; 63
 f12:	cd bf       	out	0x3d, r28	; 61
 f14:	ed 01       	movw	r28, r26
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
