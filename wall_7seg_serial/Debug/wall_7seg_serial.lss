
wall_7seg_serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800118  00800118  00000bfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001446  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8d  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c0  00000000  00000000  00002dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000035c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089e  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f7  00000000  00000000  00004112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004a09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 13 02 	call	0x426	; 0x426 <main>
  9e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
/*                                      INT 0 Interrupts                                      */
/**********************************************************************************************/
volatile uint8_t cycle_start;

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	cycle_start = TCNT0;
  b2:	86 b5       	in	r24, 0x26	; 38
  b4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <cycle_start>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_2>:

constexpr size_t read_size = 8;
uint8_t raw_read[read_size];

ISR(INT1_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	uint8_t const cnt = TCNT0 - cycle_start;
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <cycle_start>
  f8:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_ZZ10__vector_2E3idx>
  fc:	ef 5f       	subi	r30, 0xFF	; 255
  fe:	e7 70       	andi	r30, 0x07	; 7
	static uint8_t idx = 0;
	idx++;
	idx %= read_size;
 100:	e0 93 19 01 	sts	0x0119, r30	; 0x800119 <_ZZ10__vector_2E3idx>
	raw_read[idx] = cnt;
 104:	ca e1       	ldi	r28, 0x1A	; 26
 106:	d1 e0       	ldi	r29, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e6 5e       	subi	r30, 0xE6	; 230
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	89 1b       	sub	r24, r25
 110:	80 83       	st	Z, r24
	//Serial::sendf("0x%08x\t",raw_read);
	auto const avg_cnt = []{
		float count = 0;
		for(uint8_t i = 0; i < read_size; i++)
		{
			count += (uint8_t)(raw_read[i]);
 112:	68 81       	ld	r22, Y
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	a9 01       	movw	r20, r18
 124:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 128:	6b 01       	movw	r12, r22
 12a:	7c 01       	movw	r14, r24
 12c:	69 81       	ldd	r22, Y+1	; 0x01
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 138:	a7 01       	movw	r20, r14
 13a:	96 01       	movw	r18, r12
 13c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 140:	6b 01       	movw	r12, r22
 142:	7c 01       	movw	r14, r24
 144:	6a 81       	ldd	r22, Y+2	; 0x02
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 150:	a7 01       	movw	r20, r14
 152:	96 01       	movw	r18, r12
 154:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24
 15c:	6b 81       	ldd	r22, Y+3	; 0x03
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 168:	a7 01       	movw	r20, r14
 16a:	96 01       	movw	r18, r12
 16c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 170:	6b 01       	movw	r12, r22
 172:	7c 01       	movw	r14, r24
 174:	6c 81       	ldd	r22, Y+4	; 0x04
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 180:	a7 01       	movw	r20, r14
 182:	96 01       	movw	r18, r12
 184:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
 18c:	6d 81       	ldd	r22, Y+5	; 0x05
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 198:	a7 01       	movw	r20, r14
 19a:	96 01       	movw	r18, r12
 19c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 1a0:	6b 01       	movw	r12, r22
 1a2:	7c 01       	movw	r14, r24
 1a4:	6e 81       	ldd	r22, Y+6	; 0x06
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 1b8:	6b 01       	movw	r12, r22
 1ba:	7c 01       	movw	r14, r24
			//Serial::sendf("%i\t",(uint8_t)(raw_read[i]));
		}
		return count / read_size;
	}();
//Serial::send('\n');
	auto const dist = avg_cnt *343.0f / (2000000.0f / 64) * 1/0.0254f; 
 1bc:	6f 81       	ldd	r22, Y+7	; 0x07
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatsisf>
 1c8:	a7 01       	movw	r20, r14
 1ca:	96 01       	movw	r18, r12
 1cc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__addsf3>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	5e e3       	ldi	r21, 0x3E	; 62
 1d8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__mulsf3>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e8       	ldi	r19, 0x80	; 128
 1e0:	4b ea       	ldi	r20, 0xAB	; 171
 1e2:	53 e4       	ldi	r21, 0x43	; 67
 1e4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__mulsf3>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	34 e2       	ldi	r19, 0x24	; 36
 1ec:	44 ef       	ldi	r20, 0xF4	; 244
 1ee:	56 e4       	ldi	r21, 0x46	; 70
 1f0:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 1f4:	29 ea       	ldi	r18, 0xA9	; 169
 1f6:	33 e1       	ldi	r19, 0x13	; 19
 1f8:	40 ed       	ldi	r20, 0xD0	; 208
 1fa:	5c e3       	ldi	r21, 0x3C	; 60
 1fc:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 200:	6b 01       	movw	r12, r22
 202:	7c 01       	movw	r14, r24
	digit = dist;
 204:	0e 94 bb 03 	call	0x776	; 0x776 <__fixsfsi>
 208:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 20c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
	
	uint16_t ocr1b = avg_cnt / 20 *64;
	//if(ocr1b > 64) OCR1B = 128;
	//else OCR1B = ocr1b + 64;
	OCR0B=dist;
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 218:	68 bd       	out	0x28, r22	; 40
	//(avg_cnt / 20 *64 + 64);

	//Serial::sendf("%i\n", (uint32_t)(avg_cnt*10));
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	cf 90       	pop	r12
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_11>:
/**********************************************************************************************/
/*                                     Timer 1 Interrupts                                     */
/**********************************************************************************************/

ISR(TIMER1_COMPA_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <__vector_11+0x14>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << PORTD4);
 260:	5c 9a       	sbi	0x0b, 4	; 11
	for(volatile int i = 0; i < 0; i++); // wait 13us (measured)
 262:	1a 82       	std	Y+2, r1	; 0x02
 264:	19 82       	std	Y+1, r1	; 0x01
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	97 ff       	sbrs	r25, 7
 26c:	09 c0       	rjmp	.+18     	; 0x280 <__vector_11+0x38>
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	97 fd       	sbrc	r25, 7
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <__vector_11+0x26>
	PORTD &= ~(1 << PORTD4);
 280:	5c 98       	cbi	0x0b, 4	; 11
	//Serial::send("100\n");
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_7>:
/*                                     Timer 2 Interrupts                                     */
/**********************************************************************************************/


ISR(TIMER2_COMPA_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	//Serial::send("TIMER2_OVF_vect\n");
	
	//PORTD |=  (1 << PORTD4);
	//PORTD &= ~(1 << PORTD4);
	static volatile uint8_t dig = 0;
	dig++;
 2ba:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	dig %= 4; // toggle digit
 2c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2c8:	83 70       	andi	r24, 0x03	; 3
 2ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	disp(_off);
 2ce:	81 e1       	ldi	r24, 0x11	; 17
 2d0:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN4seg74dispENS_11_7_seg_valsE>
	PORTC = 0;
 2d4:	18 b8       	out	0x08, r1	; 8
	int const digit_ = digit;
 2d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
	switch(dig)
 2de:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
 2e2:	91 30       	cpi	r25, 0x01	; 1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_7+0x50>
 2e6:	4d c0       	rjmp	.+154    	; 0x382 <__vector_7+0xea>
 2e8:	c0 f1       	brcs	.+112    	; 0x35a <__vector_7+0xc2>
 2ea:	92 30       	cpi	r25, 0x02	; 2
 2ec:	31 f1       	breq	.+76     	; 0x33a <__vector_7+0xa2>
 2ee:	93 30       	cpi	r25, 0x03	; 3
 2f0:	49 f4       	brne	.+18     	; 0x304 <__vector_7+0x6c>
			else if((i = digit_/10))
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 3:
			disp((_7_seg_vals)absval(digit_%10));
 2f2:	c9 01       	movw	r24, r18
 2f4:	6a e0       	ldi	r22, 0x0A	; 10
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>

#include "avr/io.h"

inline uint8_t absval(int8_t val)
{
	if(val < 0) val = -val;
 2fc:	87 fd       	sbrc	r24, 7
 2fe:	56 c0       	rjmp	.+172    	; 0x3ac <__vector_7+0x114>
 300:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN4seg74dispENS_11_7_seg_valsE>
			break;
	}

	PORTC = dig_enable[dig];
 304:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ee 5f       	subi	r30, 0xFE	; 254
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	88 b9       	out	0x08, r24	; 8
	TCNT2 = 100;
 312:	84 e6       	ldi	r24, 0x64	; 100
 314:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	//Serial::send("/TIMER2_OVF_vect\n");
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 2: {
			int i;
			if(digit_ < 0 && !(digit_ < -9))
 33a:	c9 01       	movw	r24, r18
 33c:	09 96       	adiw	r24, 0x09	; 9
 33e:	09 97       	sbiw	r24, 0x09	; 9
 340:	88 f1       	brcs	.+98     	; 0x3a4 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/10))
 342:	ea e0       	ldi	r30, 0x0A	; 10
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	c9 01       	movw	r24, r18
 348:	bf 01       	movw	r22, r30
 34a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 34e:	61 15       	cp	r22, r1
 350:	71 05       	cpc	r23, r1
 352:	c1 f2       	breq	.-80     	; 0x304 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 354:	cb 01       	movw	r24, r22
 356:	bf 01       	movw	r22, r30
 358:	cf cf       	rjmp	.-98     	; 0x2f8 <__vector_7+0x60>
	int const digit_ = digit;
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
 35a:	2d 39       	cpi	r18, 0x9D	; 157
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	38 07       	cpc	r19, r24
 360:	0c f1       	brlt	.+66     	; 0x3a4 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/1000))
 362:	c9 01       	movw	r24, r18
 364:	68 ee       	ldi	r22, 0xE8	; 232
 366:	73 e0       	ldi	r23, 0x03	; 3
 368:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 36c:	61 15       	cp	r22, r1
 36e:	71 05       	cpc	r23, r1
 370:	49 f2       	breq	.-110    	; 0x304 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 372:	cb 01       	movw	r24, r22
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 37c:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN4seg74dispENS_11_7_seg_valsE>
 380:	c1 cf       	rjmp	.-126    	; 0x304 <__vector_7+0x6c>
			//PORTB &= ~dp;
			break;
		}
		case 1: {
			int i;
			if(digit_ < -9 && !(digit_ < -99))
 382:	c9 01       	movw	r24, r18
 384:	8d 59       	subi	r24, 0x9D	; 157
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	8a 35       	cpi	r24, 0x5A	; 90
 38a:	91 05       	cpc	r25, r1
 38c:	58 f0       	brcs	.+22     	; 0x3a4 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/100))
 38e:	c9 01       	movw	r24, r18
 390:	64 e6       	ldi	r22, 0x64	; 100
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 398:	61 15       	cp	r22, r1
 39a:	71 05       	cpc	r23, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <__vector_7+0x108>
 39e:	b2 cf       	rjmp	.-156    	; 0x304 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 3a0:	cb 01       	movw	r24, r22
 3a2:	a8 cf       	rjmp	.-176    	; 0x2f4 <__vector_7+0x5c>
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
				disp(_dash); // show negative sign
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN4seg74dispENS_11_7_seg_valsE>
 3aa:	ac cf       	rjmp	.-168    	; 0x304 <__vector_7+0x6c>
 3ac:	81 95       	neg	r24
 3ae:	a8 cf       	rjmp	.-176    	; 0x300 <__vector_7+0x68>

000003b0 <__vector_18>:
/************************************************************************/
/*                                USART                                 */
/************************************************************************/

ISR(USART_RX_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	1f 92       	push	r1
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	const char value = Serial::read();
 3dc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN6Serial4readEv>
 3e0:	89 83       	std	Y+1, r24	; 0x01
	digit = atoi(&value);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	0e 94 7f 05 	call	0xafe	; 0xafe <atoi>
 3ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	Serial::send(digit);
 3f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3fa:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN6Serial4sendEh>
}
 3fe:	0f 90       	pop	r0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <main>:

extern volatile float digit;

int main(void)
{
	TCCR1B = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    DDRB = 0xff;
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
 430:	87 b9       	out	0x07, r24	; 7
	DDRD =  (1 << PORTD4) | 
			(1 << PORTD5);
 432:	80 e3       	ldi	r24, 0x30	; 48
 434:	8a b9       	out	0x0a, r24	; 10

	PORTD =~(1 << PORTD5);
 436:	8f ed       	ldi	r24, 0xDF	; 223
 438:	8b b9       	out	0x0b, r24	; 11
	Serial::begin(4800,Serial::async);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	80 ec       	ldi	r24, 0xC0	; 192
 43e:	92 e1       	ldi	r25, 0x12	; 18
 440:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN6Serial5beginEjNS_4ModeE>
				 prescaler |
				 (TCCR2B & 0xB0);
	}

	extern inline void setMode(Mode mode) {
		TCCR2A |=    mode & ((1 << WGM21) | (1 << WGM20));
 444:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		TCCR2A &= ~(~mode & ((1 << WGM21) | (1 << WGM20)));
 44e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
			
		TCCR2B |=    mode & (1 << WGM22);
 458:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 45c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(~mode & (1 << WGM22));
 460:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 464:	87 7f       	andi	r24, 0xF7	; 247
 466:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	}
	
	extern inline void setPrescaler(Prescaler prescaler) {
		TCCR2B |=    prescaler & ((1 << CS22) | (1 << CS21) | (1 << CS20));
 46a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 46e:	84 60       	ori	r24, 0x04	; 4
 470:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(~prescaler & ((1 << CS22) | (1 << CS21) | (1 << CS20)));
 474:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 478:	8c 7f       	andi	r24, 0xFC	; 252
 47a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    {	// Setup Timer 2
		using namespace Timer2;
		Timer2::setMode(CTC);
	    Timer2::setPrescaler(_64);
		
	    TIMSK2 = (1 <<OCIE2A);
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		
		OCR2A = 203;
 484:	8b ec       	ldi	r24, 0xCB	; 203
 486:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	
	extern inline void setup(Mode mode, 
							 Prescaler prescaler) 
	{
		TCCR1A = (mode & ((1 << WGM11) | (1 << WGM10))) |
				 (TCCR1A & 0xf0);
 48a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 48e:	80 7f       	andi	r24, 0xF0	; 240
 490:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

		TCCR1B = (mode & ((1 << WGM13) | (1 << WGM12))) | 
				  (prescaler &  ((1 << CS12) | (1 << CS11) | (1 << CS10))) |
				  (TCCR1B & 0xB0);
 494:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 498:	80 7b       	andi	r24, 0xB0	; 176
 49a:	8a 60       	ori	r24, 0x0A	; 10
 49c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	{	// Setup Timer 1
		using namespace Timer1;
		Timer1::setup(CTC_OCRA,_8);
	
		OCR1A = 8000;
 4a0:	20 e4       	ldi	r18, 0x40	; 64
 4a2:	3f e1       	ldi	r19, 0x1F	; 31
 4a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 4a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
		TIMSK1 = (1 << OCIE1A);
 4ac:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	}

	{	// Setup Timer 0
		using namespace Timer0;
		
		TCCR0A = (1 << COM0B1) | 3;
 4b0:	83 e2       	ldi	r24, 0x23	; 35
 4b2:	84 bd       	out	0x24, r24	; 36
		TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	85 bd       	out	0x25, r24	; 37
		OCR0A = 194;
 4b8:	92 ec       	ldi	r25, 0xC2	; 194
 4ba:	97 bd       	out	0x27, r25	; 39
	
		//OCR0B = 1;
		//TIMSK0 = (1 << OCIE0A);
	}

	EICRA = (1 << ISC01) | (1 << ISC11) | (1 << ISC00);
 4bc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= (1 << INT1) | (1 << INT0);
 4c0:	8d b3       	in	r24, 0x1d	; 29
 4c2:	83 60       	ori	r24, 0x03	; 3
 4c4:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 4c6:	78 94       	sei
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <main+0xa2>

000004ca <_ZN4seg74dispENS_11_7_seg_valsE>:
#include <avr/io.h>
using namespace seg7;

void seg7::disp(_7_seg_vals val)
{
	PORTB = ~num_map[val];
 4ca:	e8 2f       	mov	r30, r24
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ea 5f       	subi	r30, 0xFA	; 250
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	80 81       	ld	r24, Z
 4d4:	80 95       	com	r24
 4d6:	85 b9       	out	0x05, r24	; 5
 4d8:	08 95       	ret

000004da <_ZN6Serial5beginEjNS_4ModeE>:
	}
	return 0ULL;
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 4ee:	61 30       	cpi	r22, 0x01	; 1
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <_ZN6Serial5beginEjNS_4ModeE+0x1a>
 4f2:	49 c0       	rjmp	.+146    	; 0x586 <_ZN6Serial5beginEjNS_4ModeE+0xac>
 4f4:	e8 f1       	brcs	.+122    	; 0x570 <_ZN6Serial5beginEjNS_4ModeE+0x96>
 4f6:	62 30       	cpi	r22, 0x02	; 2
 4f8:	a9 f4       	brne	.+42     	; 0x524 <_ZN6Serial5beginEjNS_4ModeE+0x4a>
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
 4fa:	5c 01       	movw	r10, r24
 4fc:	c1 2c       	mov	r12, r1
 4fe:	d1 2c       	mov	r13, r1
 500:	e1 2c       	mov	r14, r1
 502:	f1 2c       	mov	r15, r1
 504:	00 e0       	ldi	r16, 0x00	; 0
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	28 e4       	ldi	r18, 0x48	; 72
 50a:	38 ee       	ldi	r19, 0xE8	; 232
 50c:	41 e0       	ldi	r20, 0x01	; 1
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivdi3>
 51c:	af ef       	ldi	r26, 0xFF	; 255
 51e:	0e 94 5f 05 	call	0xabe	; 0xabe <__adddi3_s8>
 522:	02 c0       	rjmp	.+4      	; 0x528 <_ZN6Serial5beginEjNS_4ModeE+0x4e>

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
	uint16_t ubrr = getUBRR(baudRate,mode);
	UBRR0H = (uint8_t)(ubrr >> 8);				// Set Buad Rate
 528:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)ubrr;
 52c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A &= ~(1 << U2X0);						// disable asnyc2x, apparently this can sometimes be necessary
 530:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 534:	8d 7f       	andi	r24, 0xFD	; 253
 536:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B |= (1 << RXCIE0);					// Enable receiver interrupt
 53a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		// Enable RX(receiver) and TX(transmitter)
 544:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 548:	88 61       	ori	r24, 0x18	; 24
 54a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// set frame: 8bit 1stop
 54e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 552:	86 60       	ori	r24, 0x06	; 6
 554:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	sei();
 558:	78 94       	sei
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	08 95       	ret
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 570:	5c 01       	movw	r10, r24
 572:	c1 2c       	mov	r12, r1
 574:	d1 2c       	mov	r13, r1
 576:	e1 2c       	mov	r14, r1
 578:	f1 2c       	mov	r15, r1
 57a:	00 e0       	ldi	r16, 0x00	; 0
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	20 e2       	ldi	r18, 0x20	; 32
 580:	31 ea       	ldi	r19, 0xA1	; 161
 582:	47 e0       	ldi	r20, 0x07	; 7
 584:	c4 cf       	rjmp	.-120    	; 0x50e <_ZN6Serial5beginEjNS_4ModeE+0x34>
static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
 586:	5c 01       	movw	r10, r24
 588:	c1 2c       	mov	r12, r1
 58a:	d1 2c       	mov	r13, r1
 58c:	e1 2c       	mov	r14, r1
 58e:	f1 2c       	mov	r15, r1
 590:	00 e0       	ldi	r16, 0x00	; 0
 592:	10 e0       	ldi	r17, 0x00	; 0
 594:	24 e2       	ldi	r18, 0x24	; 36
 596:	34 ef       	ldi	r19, 0xF4	; 244
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	b9 cf       	rjmp	.-142    	; 0x50e <_ZN6Serial5beginEjNS_4ModeE+0x34>

0000059c <_ZN6Serial4sendEh>:
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 59c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 5a0:	95 ff       	sbrs	r25, 5
 5a2:	fc cf       	rjmp	.-8      	; 0x59c <_ZN6Serial4sendEh>
		;
	UDR0 = data;
 5a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return data;
}
 5a8:	08 95       	ret

000005aa <_ZN6Serial4readEv>:

uint8_t Serial::read()
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 5aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 5ae:	85 ff       	sbrs	r24, 5
 5b0:	fc cf       	rjmp	.-8      	; 0x5aa <_ZN6Serial4readEv>
		;
	return UDR0;
 5b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 5b6:	08 95       	ret

000005b8 <__subsf3>:
 5b8:	50 58       	subi	r21, 0x80	; 128

000005ba <__addsf3>:
 5ba:	bb 27       	eor	r27, r27
 5bc:	aa 27       	eor	r26, r26
 5be:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__addsf3x>
 5c2:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_round>
 5c6:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscA>
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__addsf3+0x20>
 5cc:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_pscB>
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__addsf3+0x20>
 5d2:	39 f4       	brne	.+14     	; 0x5e2 <__addsf3+0x28>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	19 f4       	brne	.+6      	; 0x5de <__addsf3+0x24>
 5d8:	26 f4       	brtc	.+8      	; 0x5e2 <__addsf3+0x28>
 5da:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_nan>
 5de:	0e f4       	brtc	.+2      	; 0x5e2 <__addsf3+0x28>
 5e0:	e0 95       	com	r30
 5e2:	e7 fb       	bst	r30, 7
 5e4:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>

000005e8 <__addsf3x>:
 5e8:	e9 2f       	mov	r30, r25
 5ea:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_split3>
 5ee:	58 f3       	brcs	.-42     	; 0x5c6 <__addsf3+0xc>
 5f0:	ba 17       	cp	r27, r26
 5f2:	62 07       	cpc	r22, r18
 5f4:	73 07       	cpc	r23, r19
 5f6:	84 07       	cpc	r24, r20
 5f8:	95 07       	cpc	r25, r21
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__addsf3x+0x1c>
 5fc:	79 f4       	brne	.+30     	; 0x61c <__addsf3x+0x34>
 5fe:	a6 f5       	brtc	.+104    	; 0x668 <__addsf3x+0x80>
 600:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_zero>
 604:	0e f4       	brtc	.+2      	; 0x608 <__addsf3x+0x20>
 606:	e0 95       	com	r30
 608:	0b 2e       	mov	r0, r27
 60a:	ba 2f       	mov	r27, r26
 60c:	a0 2d       	mov	r26, r0
 60e:	0b 01       	movw	r0, r22
 610:	b9 01       	movw	r22, r18
 612:	90 01       	movw	r18, r0
 614:	0c 01       	movw	r0, r24
 616:	ca 01       	movw	r24, r20
 618:	a0 01       	movw	r20, r0
 61a:	11 24       	eor	r1, r1
 61c:	ff 27       	eor	r31, r31
 61e:	59 1b       	sub	r21, r25
 620:	99 f0       	breq	.+38     	; 0x648 <__addsf3x+0x60>
 622:	59 3f       	cpi	r21, 0xF9	; 249
 624:	50 f4       	brcc	.+20     	; 0x63a <__addsf3x+0x52>
 626:	50 3e       	cpi	r21, 0xE0	; 224
 628:	68 f1       	brcs	.+90     	; 0x684 <__addsf3x+0x9c>
 62a:	1a 16       	cp	r1, r26
 62c:	f0 40       	sbci	r31, 0x00	; 0
 62e:	a2 2f       	mov	r26, r18
 630:	23 2f       	mov	r18, r19
 632:	34 2f       	mov	r19, r20
 634:	44 27       	eor	r20, r20
 636:	58 5f       	subi	r21, 0xF8	; 248
 638:	f3 cf       	rjmp	.-26     	; 0x620 <__addsf3x+0x38>
 63a:	46 95       	lsr	r20
 63c:	37 95       	ror	r19
 63e:	27 95       	ror	r18
 640:	a7 95       	ror	r26
 642:	f0 40       	sbci	r31, 0x00	; 0
 644:	53 95       	inc	r21
 646:	c9 f7       	brne	.-14     	; 0x63a <__addsf3x+0x52>
 648:	7e f4       	brtc	.+30     	; 0x668 <__addsf3x+0x80>
 64a:	1f 16       	cp	r1, r31
 64c:	ba 0b       	sbc	r27, r26
 64e:	62 0b       	sbc	r22, r18
 650:	73 0b       	sbc	r23, r19
 652:	84 0b       	sbc	r24, r20
 654:	ba f0       	brmi	.+46     	; 0x684 <__addsf3x+0x9c>
 656:	91 50       	subi	r25, 0x01	; 1
 658:	a1 f0       	breq	.+40     	; 0x682 <__addsf3x+0x9a>
 65a:	ff 0f       	add	r31, r31
 65c:	bb 1f       	adc	r27, r27
 65e:	66 1f       	adc	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	c2 f7       	brpl	.-16     	; 0x656 <__addsf3x+0x6e>
 666:	0e c0       	rjmp	.+28     	; 0x684 <__addsf3x+0x9c>
 668:	ba 0f       	add	r27, r26
 66a:	62 1f       	adc	r22, r18
 66c:	73 1f       	adc	r23, r19
 66e:	84 1f       	adc	r24, r20
 670:	48 f4       	brcc	.+18     	; 0x684 <__addsf3x+0x9c>
 672:	87 95       	ror	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f7 95       	ror	r31
 67c:	9e 3f       	cpi	r25, 0xFE	; 254
 67e:	08 f0       	brcs	.+2      	; 0x682 <__addsf3x+0x9a>
 680:	b0 cf       	rjmp	.-160    	; 0x5e2 <__addsf3+0x28>
 682:	93 95       	inc	r25
 684:	88 0f       	add	r24, r24
 686:	08 f0       	brcs	.+2      	; 0x68a <__addsf3x+0xa2>
 688:	99 27       	eor	r25, r25
 68a:	ee 0f       	add	r30, r30
 68c:	97 95       	ror	r25
 68e:	87 95       	ror	r24
 690:	08 95       	ret

00000692 <__divsf3>:
 692:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3x>
 696:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_round>
 69a:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_pscB>
 69e:	58 f0       	brcs	.+22     	; 0x6b6 <__divsf3+0x24>
 6a0:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscA>
 6a4:	40 f0       	brcs	.+16     	; 0x6b6 <__divsf3+0x24>
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <__divsf3+0x20>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	29 f0       	breq	.+10     	; 0x6b6 <__divsf3+0x24>
 6ac:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 6b0:	51 11       	cpse	r21, r1
 6b2:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 6b6:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_nan>

000006ba <__divsf3x>:
 6ba:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_split3>
 6be:	68 f3       	brcs	.-38     	; 0x69a <__divsf3+0x8>

000006c0 <__divsf3_pse>:
 6c0:	99 23       	and	r25, r25
 6c2:	b1 f3       	breq	.-20     	; 0x6b0 <__divsf3+0x1e>
 6c4:	55 23       	and	r21, r21
 6c6:	91 f3       	breq	.-28     	; 0x6ac <__divsf3+0x1a>
 6c8:	95 1b       	sub	r25, r21
 6ca:	55 0b       	sbc	r21, r21
 6cc:	bb 27       	eor	r27, r27
 6ce:	aa 27       	eor	r26, r26
 6d0:	62 17       	cp	r22, r18
 6d2:	73 07       	cpc	r23, r19
 6d4:	84 07       	cpc	r24, r20
 6d6:	38 f0       	brcs	.+14     	; 0x6e6 <__divsf3_pse+0x26>
 6d8:	9f 5f       	subi	r25, 0xFF	; 255
 6da:	5f 4f       	sbci	r21, 0xFF	; 255
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	44 1f       	adc	r20, r20
 6e2:	aa 1f       	adc	r26, r26
 6e4:	a9 f3       	breq	.-22     	; 0x6d0 <__divsf3_pse+0x10>
 6e6:	35 d0       	rcall	.+106    	; 0x752 <__divsf3_pse+0x92>
 6e8:	0e 2e       	mov	r0, r30
 6ea:	3a f0       	brmi	.+14     	; 0x6fa <__divsf3_pse+0x3a>
 6ec:	e0 e8       	ldi	r30, 0x80	; 128
 6ee:	32 d0       	rcall	.+100    	; 0x754 <__divsf3_pse+0x94>
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	e6 95       	lsr	r30
 6f6:	00 1c       	adc	r0, r0
 6f8:	ca f7       	brpl	.-14     	; 0x6ec <__divsf3_pse+0x2c>
 6fa:	2b d0       	rcall	.+86     	; 0x752 <__divsf3_pse+0x92>
 6fc:	fe 2f       	mov	r31, r30
 6fe:	29 d0       	rcall	.+82     	; 0x752 <__divsf3_pse+0x92>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	bb 1f       	adc	r27, r27
 708:	26 17       	cp	r18, r22
 70a:	37 07       	cpc	r19, r23
 70c:	48 07       	cpc	r20, r24
 70e:	ab 07       	cpc	r26, r27
 710:	b0 e8       	ldi	r27, 0x80	; 128
 712:	09 f0       	breq	.+2      	; 0x716 <__divsf3_pse+0x56>
 714:	bb 0b       	sbc	r27, r27
 716:	80 2d       	mov	r24, r0
 718:	bf 01       	movw	r22, r30
 71a:	ff 27       	eor	r31, r31
 71c:	93 58       	subi	r25, 0x83	; 131
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	3a f0       	brmi	.+14     	; 0x730 <__divsf3_pse+0x70>
 722:	9e 3f       	cpi	r25, 0xFE	; 254
 724:	51 05       	cpc	r21, r1
 726:	78 f0       	brcs	.+30     	; 0x746 <__divsf3_pse+0x86>
 728:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 72c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 730:	5f 3f       	cpi	r21, 0xFF	; 255
 732:	e4 f3       	brlt	.-8      	; 0x72c <__divsf3_pse+0x6c>
 734:	98 3e       	cpi	r25, 0xE8	; 232
 736:	d4 f3       	brlt	.-12     	; 0x72c <__divsf3_pse+0x6c>
 738:	86 95       	lsr	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f7 95       	ror	r31
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	c9 f7       	brne	.-14     	; 0x738 <__divsf3_pse+0x78>
 746:	88 0f       	add	r24, r24
 748:	91 1d       	adc	r25, r1
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret
 752:	e1 e0       	ldi	r30, 0x01	; 1
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	bb 1f       	adc	r27, r27
 75c:	62 17       	cp	r22, r18
 75e:	73 07       	cpc	r23, r19
 760:	84 07       	cpc	r24, r20
 762:	ba 07       	cpc	r27, r26
 764:	20 f0       	brcs	.+8      	; 0x76e <__divsf3_pse+0xae>
 766:	62 1b       	sub	r22, r18
 768:	73 0b       	sbc	r23, r19
 76a:	84 0b       	sbc	r24, r20
 76c:	ba 0b       	sbc	r27, r26
 76e:	ee 1f       	adc	r30, r30
 770:	88 f7       	brcc	.-30     	; 0x754 <__divsf3_pse+0x94>
 772:	e0 95       	com	r30
 774:	08 95       	ret

00000776 <__fixsfsi>:
 776:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 77a:	68 94       	set
 77c:	b1 11       	cpse	r27, r1
 77e:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 782:	08 95       	ret

00000784 <__fixunssfsi>:
 784:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_splitA>
 788:	88 f0       	brcs	.+34     	; 0x7ac <__fixunssfsi+0x28>
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	98 f0       	brcs	.+38     	; 0x7b4 <__fixunssfsi+0x30>
 78e:	b9 2f       	mov	r27, r25
 790:	99 27       	eor	r25, r25
 792:	b7 51       	subi	r27, 0x17	; 23
 794:	b0 f0       	brcs	.+44     	; 0x7c2 <__fixunssfsi+0x3e>
 796:	e1 f0       	breq	.+56     	; 0x7d0 <__fixunssfsi+0x4c>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	1a f0       	brmi	.+6      	; 0x7a8 <__fixunssfsi+0x24>
 7a2:	ba 95       	dec	r27
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__fixunssfsi+0x14>
 7a6:	14 c0       	rjmp	.+40     	; 0x7d0 <__fixunssfsi+0x4c>
 7a8:	b1 30       	cpi	r27, 0x01	; 1
 7aa:	91 f0       	breq	.+36     	; 0x7d0 <__fixunssfsi+0x4c>
 7ac:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_zero>
 7b0:	b1 e0       	ldi	r27, 0x01	; 1
 7b2:	08 95       	ret
 7b4:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_zero>
 7b8:	67 2f       	mov	r22, r23
 7ba:	78 2f       	mov	r23, r24
 7bc:	88 27       	eor	r24, r24
 7be:	b8 5f       	subi	r27, 0xF8	; 248
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <__fixunssfsi+0x4c>
 7c2:	b9 3f       	cpi	r27, 0xF9	; 249
 7c4:	cc f3       	brlt	.-14     	; 0x7b8 <__fixunssfsi+0x34>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b3 95       	inc	r27
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <__fixunssfsi+0x42>
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__fixunssfsi+0x5c>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__floatunsisf>:
 7e2:	e8 94       	clt
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__floatsisf+0x12>

000007e6 <__floatsisf>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__floatsisf+0x12>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	99 23       	and	r25, r25
 7fa:	a9 f0       	breq	.+42     	; 0x826 <__floatsisf+0x40>
 7fc:	f9 2f       	mov	r31, r25
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	bb 27       	eor	r27, r27
 802:	93 95       	inc	r25
 804:	f6 95       	lsr	r31
 806:	87 95       	ror	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b7 95       	ror	r27
 80e:	f1 11       	cpse	r31, r1
 810:	f8 cf       	rjmp	.-16     	; 0x802 <__floatsisf+0x1c>
 812:	fa f4       	brpl	.+62     	; 0x852 <__floatsisf+0x6c>
 814:	bb 0f       	add	r27, r27
 816:	11 f4       	brne	.+4      	; 0x81c <__floatsisf+0x36>
 818:	60 ff       	sbrs	r22, 0
 81a:	1b c0       	rjmp	.+54     	; 0x852 <__floatsisf+0x6c>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	16 c0       	rjmp	.+44     	; 0x852 <__floatsisf+0x6c>
 826:	88 23       	and	r24, r24
 828:	11 f0       	breq	.+4      	; 0x82e <__floatsisf+0x48>
 82a:	96 e9       	ldi	r25, 0x96	; 150
 82c:	11 c0       	rjmp	.+34     	; 0x850 <__floatsisf+0x6a>
 82e:	77 23       	and	r23, r23
 830:	21 f0       	breq	.+8      	; 0x83a <__floatsisf+0x54>
 832:	9e e8       	ldi	r25, 0x8E	; 142
 834:	87 2f       	mov	r24, r23
 836:	76 2f       	mov	r23, r22
 838:	05 c0       	rjmp	.+10     	; 0x844 <__floatsisf+0x5e>
 83a:	66 23       	and	r22, r22
 83c:	71 f0       	breq	.+28     	; 0x85a <__floatsisf+0x74>
 83e:	96 e8       	ldi	r25, 0x86	; 134
 840:	86 2f       	mov	r24, r22
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	2a f0       	brmi	.+10     	; 0x852 <__floatsisf+0x6c>
 848:	9a 95       	dec	r25
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	da f7       	brpl	.-10     	; 0x848 <__floatsisf+0x62>
 852:	88 0f       	add	r24, r24
 854:	96 95       	lsr	r25
 856:	87 95       	ror	r24
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__fp_inf>:
 85c:	97 f9       	bld	r25, 7
 85e:	9f 67       	ori	r25, 0x7F	; 127
 860:	80 e8       	ldi	r24, 0x80	; 128
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	08 95       	ret

00000868 <__fp_nan>:
 868:	9f ef       	ldi	r25, 0xFF	; 255
 86a:	80 ec       	ldi	r24, 0xC0	; 192
 86c:	08 95       	ret

0000086e <__fp_pscA>:
 86e:	00 24       	eor	r0, r0
 870:	0a 94       	dec	r0
 872:	16 16       	cp	r1, r22
 874:	17 06       	cpc	r1, r23
 876:	18 06       	cpc	r1, r24
 878:	09 06       	cpc	r0, r25
 87a:	08 95       	ret

0000087c <__fp_pscB>:
 87c:	00 24       	eor	r0, r0
 87e:	0a 94       	dec	r0
 880:	12 16       	cp	r1, r18
 882:	13 06       	cpc	r1, r19
 884:	14 06       	cpc	r1, r20
 886:	05 06       	cpc	r0, r21
 888:	08 95       	ret

0000088a <__fp_round>:
 88a:	09 2e       	mov	r0, r25
 88c:	03 94       	inc	r0
 88e:	00 0c       	add	r0, r0
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0xc>
 892:	88 23       	and	r24, r24
 894:	52 f0       	brmi	.+20     	; 0x8aa <__fp_round+0x20>
 896:	bb 0f       	add	r27, r27
 898:	40 f4       	brcc	.+16     	; 0x8aa <__fp_round+0x20>
 89a:	bf 2b       	or	r27, r31
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0x18>
 89e:	60 ff       	sbrs	r22, 0
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fp_round+0x20>
 8a2:	6f 5f       	subi	r22, 0xFF	; 255
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	8f 4f       	sbci	r24, 0xFF	; 255
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	08 95       	ret

000008ac <__fp_split3>:
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	90 58       	subi	r25, 0x80	; 128
 8b0:	44 0f       	add	r20, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	59 f0       	breq	.+22     	; 0x8cc <__fp_splitA+0x10>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__fp_splitA+0x1a>
 8ba:	47 95       	ror	r20

000008bc <__fp_splitA>:
 8bc:	88 0f       	add	r24, r24
 8be:	97 fb       	bst	r25, 7
 8c0:	99 1f       	adc	r25, r25
 8c2:	61 f0       	breq	.+24     	; 0x8dc <__fp_splitA+0x20>
 8c4:	9f 3f       	cpi	r25, 0xFF	; 255
 8c6:	79 f0       	breq	.+30     	; 0x8e6 <__fp_splitA+0x2a>
 8c8:	87 95       	ror	r24
 8ca:	08 95       	ret
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	14 06       	cpc	r1, r20
 8d2:	55 1f       	adc	r21, r21
 8d4:	f2 cf       	rjmp	.-28     	; 0x8ba <__fp_split3+0xe>
 8d6:	46 95       	lsr	r20
 8d8:	f1 df       	rcall	.-30     	; 0x8bc <__fp_splitA>
 8da:	08 c0       	rjmp	.+16     	; 0x8ec <__fp_splitA+0x30>
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	f1 cf       	rjmp	.-30     	; 0x8c8 <__fp_splitA+0xc>
 8e6:	86 95       	lsr	r24
 8e8:	71 05       	cpc	r23, r1
 8ea:	61 05       	cpc	r22, r1
 8ec:	08 94       	sec
 8ee:	08 95       	ret

000008f0 <__fp_zero>:
 8f0:	e8 94       	clt

000008f2 <__fp_szero>:
 8f2:	bb 27       	eor	r27, r27
 8f4:	66 27       	eor	r22, r22
 8f6:	77 27       	eor	r23, r23
 8f8:	cb 01       	movw	r24, r22
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret

000008fe <__mulsf3>:
 8fe:	0e 94 92 04 	call	0x924	; 0x924 <__mulsf3x>
 902:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_round>
 906:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscA>
 90a:	38 f0       	brcs	.+14     	; 0x91a <__stack+0x1b>
 90c:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_pscB>
 910:	20 f0       	brcs	.+8      	; 0x91a <__stack+0x1b>
 912:	95 23       	and	r25, r21
 914:	11 f0       	breq	.+4      	; 0x91a <__stack+0x1b>
 916:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 91a:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_nan>
 91e:	11 24       	eor	r1, r1
 920:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>

00000924 <__mulsf3x>:
 924:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_split3>
 928:	70 f3       	brcs	.-36     	; 0x906 <__stack+0x7>

0000092a <__mulsf3_pse>:
 92a:	95 9f       	mul	r25, r21
 92c:	c1 f3       	breq	.-16     	; 0x91e <__stack+0x1f>
 92e:	95 0f       	add	r25, r21
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	55 1f       	adc	r21, r21
 934:	62 9f       	mul	r22, r18
 936:	f0 01       	movw	r30, r0
 938:	72 9f       	mul	r23, r18
 93a:	bb 27       	eor	r27, r27
 93c:	f0 0d       	add	r31, r0
 93e:	b1 1d       	adc	r27, r1
 940:	63 9f       	mul	r22, r19
 942:	aa 27       	eor	r26, r26
 944:	f0 0d       	add	r31, r0
 946:	b1 1d       	adc	r27, r1
 948:	aa 1f       	adc	r26, r26
 94a:	64 9f       	mul	r22, r20
 94c:	66 27       	eor	r22, r22
 94e:	b0 0d       	add	r27, r0
 950:	a1 1d       	adc	r26, r1
 952:	66 1f       	adc	r22, r22
 954:	82 9f       	mul	r24, r18
 956:	22 27       	eor	r18, r18
 958:	b0 0d       	add	r27, r0
 95a:	a1 1d       	adc	r26, r1
 95c:	62 1f       	adc	r22, r18
 95e:	73 9f       	mul	r23, r19
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	62 1f       	adc	r22, r18
 966:	83 9f       	mul	r24, r19
 968:	a0 0d       	add	r26, r0
 96a:	61 1d       	adc	r22, r1
 96c:	22 1f       	adc	r18, r18
 96e:	74 9f       	mul	r23, r20
 970:	33 27       	eor	r19, r19
 972:	a0 0d       	add	r26, r0
 974:	61 1d       	adc	r22, r1
 976:	23 1f       	adc	r18, r19
 978:	84 9f       	mul	r24, r20
 97a:	60 0d       	add	r22, r0
 97c:	21 1d       	adc	r18, r1
 97e:	82 2f       	mov	r24, r18
 980:	76 2f       	mov	r23, r22
 982:	6a 2f       	mov	r22, r26
 984:	11 24       	eor	r1, r1
 986:	9f 57       	subi	r25, 0x7F	; 127
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	9a f0       	brmi	.+38     	; 0x9b2 <__mulsf3_pse+0x88>
 98c:	f1 f0       	breq	.+60     	; 0x9ca <__mulsf3_pse+0xa0>
 98e:	88 23       	and	r24, r24
 990:	4a f0       	brmi	.+18     	; 0x9a4 <__mulsf3_pse+0x7a>
 992:	ee 0f       	add	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	bb 1f       	adc	r27, r27
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	91 50       	subi	r25, 0x01	; 1
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	a9 f7       	brne	.-22     	; 0x98e <__mulsf3_pse+0x64>
 9a4:	9e 3f       	cpi	r25, 0xFE	; 254
 9a6:	51 05       	cpc	r21, r1
 9a8:	80 f0       	brcs	.+32     	; 0x9ca <__mulsf3_pse+0xa0>
 9aa:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 9ae:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 9b2:	5f 3f       	cpi	r21, 0xFF	; 255
 9b4:	e4 f3       	brlt	.-8      	; 0x9ae <__mulsf3_pse+0x84>
 9b6:	98 3e       	cpi	r25, 0xE8	; 232
 9b8:	d4 f3       	brlt	.-12     	; 0x9ae <__mulsf3_pse+0x84>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f7 95       	ror	r31
 9c4:	e7 95       	ror	r30
 9c6:	9f 5f       	subi	r25, 0xFF	; 255
 9c8:	c1 f7       	brne	.-16     	; 0x9ba <__mulsf3_pse+0x90>
 9ca:	fe 2b       	or	r31, r30
 9cc:	88 0f       	add	r24, r24
 9ce:	91 1d       	adc	r25, r1
 9d0:	96 95       	lsr	r25
 9d2:	87 95       	ror	r24
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__divmodhi4>:
 9d8:	97 fb       	bst	r25, 7
 9da:	07 2e       	mov	r0, r23
 9dc:	16 f4       	brtc	.+4      	; 0x9e2 <__divmodhi4+0xa>
 9de:	00 94       	com	r0
 9e0:	07 d0       	rcall	.+14     	; 0x9f0 <__divmodhi4_neg1>
 9e2:	77 fd       	sbrc	r23, 7
 9e4:	09 d0       	rcall	.+18     	; 0x9f8 <__divmodhi4_neg2>
 9e6:	0e 94 6b 05 	call	0xad6	; 0xad6 <__udivmodhi4>
 9ea:	07 fc       	sbrc	r0, 7
 9ec:	05 d0       	rcall	.+10     	; 0x9f8 <__divmodhi4_neg2>
 9ee:	3e f4       	brtc	.+14     	; 0x9fe <__divmodhi4_exit>

000009f0 <__divmodhi4_neg1>:
 9f0:	90 95       	com	r25
 9f2:	81 95       	neg	r24
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <__divmodhi4_neg2>:
 9f8:	70 95       	com	r23
 9fa:	61 95       	neg	r22
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255

000009fe <__divmodhi4_exit>:
 9fe:	08 95       	ret

00000a00 <__umoddi3>:
 a00:	68 94       	set
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <__udivdi3_umoddi3>

00000a04 <__udivdi3>:
 a04:	e8 94       	clt

00000a06 <__udivdi3_umoddi3>:
 a06:	8f 92       	push	r8
 a08:	9f 92       	push	r9
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmod64>
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	9f 90       	pop	r9
 a18:	8f 90       	pop	r8
 a1a:	08 95       	ret

00000a1c <__udivmod64>:
 a1c:	88 24       	eor	r8, r8
 a1e:	99 24       	eor	r9, r9
 a20:	f4 01       	movw	r30, r8
 a22:	e4 01       	movw	r28, r8
 a24:	b0 e4       	ldi	r27, 0x40	; 64
 a26:	9f 93       	push	r25
 a28:	aa 27       	eor	r26, r26
 a2a:	9a 15       	cp	r25, r10
 a2c:	8b 04       	cpc	r8, r11
 a2e:	9c 04       	cpc	r9, r12
 a30:	ed 05       	cpc	r30, r13
 a32:	fe 05       	cpc	r31, r14
 a34:	cf 05       	cpc	r28, r15
 a36:	d0 07       	cpc	r29, r16
 a38:	a1 07       	cpc	r26, r17
 a3a:	98 f4       	brcc	.+38     	; 0xa62 <__udivmod64+0x46>
 a3c:	ad 2f       	mov	r26, r29
 a3e:	dc 2f       	mov	r29, r28
 a40:	cf 2f       	mov	r28, r31
 a42:	fe 2f       	mov	r31, r30
 a44:	e9 2d       	mov	r30, r9
 a46:	98 2c       	mov	r9, r8
 a48:	89 2e       	mov	r8, r25
 a4a:	98 2f       	mov	r25, r24
 a4c:	87 2f       	mov	r24, r23
 a4e:	76 2f       	mov	r23, r22
 a50:	65 2f       	mov	r22, r21
 a52:	54 2f       	mov	r21, r20
 a54:	43 2f       	mov	r20, r19
 a56:	32 2f       	mov	r19, r18
 a58:	22 27       	eor	r18, r18
 a5a:	b8 50       	subi	r27, 0x08	; 8
 a5c:	31 f7       	brne	.-52     	; 0xa2a <__udivmod64+0xe>
 a5e:	bf 91       	pop	r27
 a60:	27 c0       	rjmp	.+78     	; 0xab0 <__udivmod64+0x94>
 a62:	1b 2e       	mov	r1, r27
 a64:	bf 91       	pop	r27
 a66:	bb 27       	eor	r27, r27
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	44 1f       	adc	r20, r20
 a6e:	55 1f       	adc	r21, r21
 a70:	66 1f       	adc	r22, r22
 a72:	77 1f       	adc	r23, r23
 a74:	88 1f       	adc	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	88 1c       	adc	r8, r8
 a7a:	99 1c       	adc	r9, r9
 a7c:	ee 1f       	adc	r30, r30
 a7e:	ff 1f       	adc	r31, r31
 a80:	cc 1f       	adc	r28, r28
 a82:	dd 1f       	adc	r29, r29
 a84:	aa 1f       	adc	r26, r26
 a86:	bb 1f       	adc	r27, r27
 a88:	8a 14       	cp	r8, r10
 a8a:	9b 04       	cpc	r9, r11
 a8c:	ec 05       	cpc	r30, r12
 a8e:	fd 05       	cpc	r31, r13
 a90:	ce 05       	cpc	r28, r14
 a92:	df 05       	cpc	r29, r15
 a94:	a0 07       	cpc	r26, r16
 a96:	b1 07       	cpc	r27, r17
 a98:	48 f0       	brcs	.+18     	; 0xaac <__udivmod64+0x90>
 a9a:	8a 18       	sub	r8, r10
 a9c:	9b 08       	sbc	r9, r11
 a9e:	ec 09       	sbc	r30, r12
 aa0:	fd 09       	sbc	r31, r13
 aa2:	ce 09       	sbc	r28, r14
 aa4:	df 09       	sbc	r29, r15
 aa6:	a0 0b       	sbc	r26, r16
 aa8:	b1 0b       	sbc	r27, r17
 aaa:	21 60       	ori	r18, 0x01	; 1
 aac:	1a 94       	dec	r1
 aae:	e1 f6       	brne	.-72     	; 0xa68 <__udivmod64+0x4c>
 ab0:	2e f4       	brtc	.+10     	; 0xabc <__udivmod64+0xa0>
 ab2:	94 01       	movw	r18, r8
 ab4:	af 01       	movw	r20, r30
 ab6:	be 01       	movw	r22, r28
 ab8:	cd 01       	movw	r24, r26
 aba:	00 0c       	add	r0, r0
 abc:	08 95       	ret

00000abe <__adddi3_s8>:
 abe:	00 24       	eor	r0, r0
 ac0:	a7 fd       	sbrc	r26, 7
 ac2:	00 94       	com	r0
 ac4:	2a 0f       	add	r18, r26
 ac6:	30 1d       	adc	r19, r0
 ac8:	40 1d       	adc	r20, r0
 aca:	50 1d       	adc	r21, r0
 acc:	60 1d       	adc	r22, r0
 ace:	70 1d       	adc	r23, r0
 ad0:	80 1d       	adc	r24, r0
 ad2:	90 1d       	adc	r25, r0
 ad4:	08 95       	ret

00000ad6 <__udivmodhi4>:
 ad6:	aa 1b       	sub	r26, r26
 ad8:	bb 1b       	sub	r27, r27
 ada:	51 e1       	ldi	r21, 0x11	; 17
 adc:	07 c0       	rjmp	.+14     	; 0xaec <__udivmodhi4_ep>

00000ade <__udivmodhi4_loop>:
 ade:	aa 1f       	adc	r26, r26
 ae0:	bb 1f       	adc	r27, r27
 ae2:	a6 17       	cp	r26, r22
 ae4:	b7 07       	cpc	r27, r23
 ae6:	10 f0       	brcs	.+4      	; 0xaec <__udivmodhi4_ep>
 ae8:	a6 1b       	sub	r26, r22
 aea:	b7 0b       	sbc	r27, r23

00000aec <__udivmodhi4_ep>:
 aec:	88 1f       	adc	r24, r24
 aee:	99 1f       	adc	r25, r25
 af0:	5a 95       	dec	r21
 af2:	a9 f7       	brne	.-22     	; 0xade <__udivmodhi4_loop>
 af4:	80 95       	com	r24
 af6:	90 95       	com	r25
 af8:	bc 01       	movw	r22, r24
 afa:	cd 01       	movw	r24, r26
 afc:	08 95       	ret

00000afe <atoi>:
 afe:	fc 01       	movw	r30, r24
 b00:	88 27       	eor	r24, r24
 b02:	99 27       	eor	r25, r25
 b04:	e8 94       	clt
 b06:	21 91       	ld	r18, Z+
 b08:	20 32       	cpi	r18, 0x20	; 32
 b0a:	e9 f3       	breq	.-6      	; 0xb06 <atoi+0x8>
 b0c:	29 30       	cpi	r18, 0x09	; 9
 b0e:	10 f0       	brcs	.+4      	; 0xb14 <atoi+0x16>
 b10:	2e 30       	cpi	r18, 0x0E	; 14
 b12:	c8 f3       	brcs	.-14     	; 0xb06 <atoi+0x8>
 b14:	2b 32       	cpi	r18, 0x2B	; 43
 b16:	41 f0       	breq	.+16     	; 0xb28 <atoi+0x2a>
 b18:	2d 32       	cpi	r18, 0x2D	; 45
 b1a:	39 f4       	brne	.+14     	; 0xb2a <atoi+0x2c>
 b1c:	68 94       	set
 b1e:	04 c0       	rjmp	.+8      	; 0xb28 <atoi+0x2a>
 b20:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__mulhi_const_10>
 b24:	82 0f       	add	r24, r18
 b26:	91 1d       	adc	r25, r1
 b28:	21 91       	ld	r18, Z+
 b2a:	20 53       	subi	r18, 0x30	; 48
 b2c:	2a 30       	cpi	r18, 0x0A	; 10
 b2e:	c0 f3       	brcs	.-16     	; 0xb20 <atoi+0x22>
 b30:	1e f4       	brtc	.+6      	; 0xb38 <atoi+0x3a>
 b32:	90 95       	com	r25
 b34:	81 95       	neg	r24
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	08 95       	ret

00000b3a <__mulhi_const_10>:
 b3a:	7a e0       	ldi	r23, 0x0A	; 10
 b3c:	97 9f       	mul	r25, r23
 b3e:	90 2d       	mov	r25, r0
 b40:	87 9f       	mul	r24, r23
 b42:	80 2d       	mov	r24, r0
 b44:	91 0d       	add	r25, r1
 b46:	11 24       	eor	r1, r1
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
