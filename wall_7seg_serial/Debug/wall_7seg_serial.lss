
wall_7seg_serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00000fb0  00001044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008001a4  008001a4  000010e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c3  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bed  00000000  00000000  00002607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076b  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098d  00000000  00000000  000043bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3a       	cpi	r26, 0xA4	; 164
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ea       	ldi	r26, 0xA4	; 164
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3a       	cpi	r26, 0xA9	; 169
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  9e:	0c 94 d6 07 	jmp	0xfac	; 0xfac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/**********************************************************************************************/
/*                                      INT 0 Interrupts                                      */
/**********************************************************************************************/
ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	//TCNT1 = 0;
}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_2>:

ISR(INT1_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	float const dist = TCNT1 / (1000000.0 / 256) *343;
  dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	auto const cnt = TCNT0;
  e4:	86 b5       	in	r24, 0x26	; 38
	//if( cnt <100)
		digit = cnt;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <digit+0x1>
  ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <digit>
	Serial::sendf("dist: %i\n",TCNT0);//, (uint8_t)(dist*10));
  f0:	86 b5       	in	r24, 0x26	; 38
  f2:	1f 92       	push	r1
  f4:	8f 93       	push	r24
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	9f 93       	push	r25
  fc:	8f 93       	push	r24
  fe:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_14>:
/**********************************************************************************************/
/*                                     Timer 0 Interrupts                                     */
/**********************************************************************************************/

ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <__vector_14+0x14>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	//Serial::send("TIMER0_COMPA_vect\n");
	
	PORTD |=  (1 << PORTD4);
 144:	5c 9a       	sbi	0x0b, 4	; 11
	for(volatile int i = 0; i < 5; i++);
 146:	1a 82       	std	Y+2, r1	; 0x02
 148:	19 82       	std	Y+1, r1	; 0x01
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	05 97       	sbiw	r24, 0x05	; 5
 150:	4c f4       	brge	.+18     	; 0x164 <__vector_14+0x38>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	05 97       	sbiw	r24, 0x05	; 5
 162:	bc f3       	brlt	.-18     	; 0x152 <__vector_14+0x26>
	PORTD &= ~(1 << PORTD4);
 164:	5c 98       	cbi	0x0b, 4	; 11
	//TCNT0 = 47;
	//Serial::send("/TIMER0_COMPA_vect\n");
	
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_7>:
/*                                     Timer 2 Interrupts                                     */
/**********************************************************************************************/


ISR(TIMER2_COMPA_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	//Serial::send("TIMER2_OVF_vect\n");
	
	//PORTD |=  (1 << PORTD4);
	//PORTD &= ~(1 << PORTD4);
	static volatile uint8_t dig = 0;
	dig++;
 19e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
	dig %= 4; // toggle digit
 1a8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
 1ac:	83 70       	andi	r24, 0x03	; 3
 1ae:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
	disp(_off);
 1b2:	81 e1       	ldi	r24, 0x11	; 17
 1b4:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN4seg74dispENS_11_7_seg_valsE>
	PORTC = 0;
 1b8:	18 b8       	out	0x08, r1	; 8
	int const digit_ = digit;
 1ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <digit>
 1be:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <digit+0x1>
	switch(dig)
 1c2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <__data_end>
 1c6:	91 30       	cpi	r25, 0x01	; 1
 1c8:	09 f4       	brne	.+2      	; 0x1cc <__vector_7+0x50>
 1ca:	4d c0       	rjmp	.+154    	; 0x266 <__vector_7+0xea>
 1cc:	c0 f1       	brcs	.+112    	; 0x23e <__vector_7+0xc2>
 1ce:	92 30       	cpi	r25, 0x02	; 2
 1d0:	31 f1       	breq	.+76     	; 0x21e <__vector_7+0xa2>
 1d2:	93 30       	cpi	r25, 0x03	; 3
 1d4:	49 f4       	brne	.+18     	; 0x1e8 <__vector_7+0x6c>
			else if((i = digit_/10))
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 3:
			disp((_7_seg_vals)absval(digit_%10));
 1d6:	c9 01       	movw	r24, r18
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>

#include "avr/io.h"

inline uint8_t absval(int8_t val)
{
	if(val < 0) val = -val;
 1e0:	87 fd       	sbrc	r24, 7
 1e2:	56 c0       	rjmp	.+172    	; 0x290 <__vector_7+0x114>
 1e4:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN4seg74dispENS_11_7_seg_valsE>
			break;
	}

	PORTC = dig_enable[dig];
 1e8:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__data_end>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 5e       	subi	r30, 0xEE	; 238
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 81       	ld	r24, Z
 1f4:	88 b9       	out	0x08, r24	; 8
	TCNT2 = 100;
 1f6:	84 e6       	ldi	r24, 0x64	; 100
 1f8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	//Serial::send("/TIMER2_OVF_vect\n");
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti
				disp((_7_seg_vals)absval(i%10));
			break;
		}
		case 2: {
			int i;
			if(digit_ < 0 && !(digit_ < -9))
 21e:	c9 01       	movw	r24, r18
 220:	09 96       	adiw	r24, 0x09	; 9
 222:	09 97       	sbiw	r24, 0x09	; 9
 224:	88 f1       	brcs	.+98     	; 0x288 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/10))
 226:	ea e0       	ldi	r30, 0x0A	; 10
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	c9 01       	movw	r24, r18
 22c:	bf 01       	movw	r22, r30
 22e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 232:	61 15       	cp	r22, r1
 234:	71 05       	cpc	r23, r1
 236:	c1 f2       	breq	.-80     	; 0x1e8 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 238:	cb 01       	movw	r24, r22
 23a:	bf 01       	movw	r22, r30
 23c:	cf cf       	rjmp	.-98     	; 0x1dc <__vector_7+0x60>
	int const digit_ = digit;
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
 23e:	2d 39       	cpi	r18, 0x9D	; 157
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	38 07       	cpc	r19, r24
 244:	0c f1       	brlt	.+66     	; 0x288 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/1000))
 246:	c9 01       	movw	r24, r18
 248:	68 ee       	ldi	r22, 0xE8	; 232
 24a:	73 e0       	ldi	r23, 0x03	; 3
 24c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 250:	61 15       	cp	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	49 f2       	breq	.-110    	; 0x1e8 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 256:	cb 01       	movw	r24, r22
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 260:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN4seg74dispENS_11_7_seg_valsE>
 264:	c1 cf       	rjmp	.-126    	; 0x1e8 <__vector_7+0x6c>
			//PORTB &= ~dp;
			break;
		}
		case 1: {
			int i;
			if(digit_ < -9 && !(digit_ < -99))
 266:	c9 01       	movw	r24, r18
 268:	8d 59       	subi	r24, 0x9D	; 157
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	8a 35       	cpi	r24, 0x5A	; 90
 26e:	91 05       	cpc	r25, r1
 270:	58 f0       	brcs	.+22     	; 0x288 <__vector_7+0x10c>
				disp(_dash); // show negative sign
			else if((i = digit_/100))
 272:	c9 01       	movw	r24, r18
 274:	64 e6       	ldi	r22, 0x64	; 100
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 27c:	61 15       	cp	r22, r1
 27e:	71 05       	cpc	r23, r1
 280:	09 f4       	brne	.+2      	; 0x284 <__vector_7+0x108>
 282:	b2 cf       	rjmp	.-156    	; 0x1e8 <__vector_7+0x6c>
				disp((_7_seg_vals)absval(i%10));
 284:	cb 01       	movw	r24, r22
 286:	a8 cf       	rjmp	.-176    	; 0x1d8 <__vector_7+0x5c>
	switch(dig)
	{
		case 0: {
			int i;
			if(digit_ < -99)
				disp(_dash); // show negative sign
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN4seg74dispENS_11_7_seg_valsE>
 28e:	ac cf       	rjmp	.-168    	; 0x1e8 <__vector_7+0x6c>
 290:	81 95       	neg	r24
 292:	a8 cf       	rjmp	.-176    	; 0x1e4 <__vector_7+0x68>

00000294 <__vector_18>:
/************************************************************************/
/*                                USART                                 */
/************************************************************************/

ISR(USART_RX_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	const char value = Serial::read();
 2c0:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN6Serial4readEv>
 2c4:	89 83       	std	Y+1, r24	; 0x01
	digit = atoi(&value);
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 a0 04 	call	0x940	; 0x940 <atoi>
 2ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <digit+0x1>
 2d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <digit>
	Serial::send(digit);
 2d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <digit>
 2da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <digit+0x1>
 2de:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN6Serial4sendEh>
}
 2e2:	0f 90       	pop	r0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <main>:

extern volatile float digit;

int main(void)
{
    DDRB = 0xff;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
 30e:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << PORTD4);
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	8a b9       	out	0x0a, r24	; 10

	Serial::begin(4800,Serial::async);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	92 e1       	ldi	r25, 0x12	; 18
 31a:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN6Serial5beginEjNS_4ModeE>
	Serial::send("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 31e:	86 e1       	ldi	r24, 0x16	; 22
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 94 02 	call	0x528	; 0x528 <_ZN6Serial4sendEPc>
		_256			= 0x06,
		_1024			= 0x07
	} Prescaler;
	
	inline void setMode(Mode mode) {
		Serial::sendf("T2 set mode: 0x%02X\n", mode);
 326:	1f 92       	push	r1
 328:	d2 e0       	ldi	r29, 0x02	; 2
 32a:	df 93       	push	r29
 32c:	8b e2       	ldi	r24, 0x2B	; 43
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	9f 93       	push	r25
 332:	8f 93       	push	r24
 334:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
		TCCR2A |=   mode &  ((1 << WGM21) | (1 << WGM20));
 338:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		TCCR2A &= ~(mode & ~((1 << WGM21) | (1 << WGM20)));
 342:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 346:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
			
		TCCR2B |=   mode & (1 << WGM22);
 34a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 34e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(mode & ~(1 << WGM22));
 352:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	}
	
	inline void setPrescaler(Prescaler prescaler) {
		Serial::sendf("T2 set prescaler: 0x%02X\n", prescaler);
 35c:	1f 92       	push	r1
 35e:	c4 e0       	ldi	r28, 0x04	; 4
 360:	cf 93       	push	r28
 362:	80 e4       	ldi	r24, 0x40	; 64
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
		TCCR2B |=   prescaler &  ((1 << CS22) | (1 << CS21) | (1 << CS20));
 36e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 372:	84 60       	ori	r24, 0x04	; 4
 374:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCCR2B &= ~(prescaler & ~((1 << CS22) | (1 << CS21) | (1 << CS20)));
 378:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 37c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    {	// Setup Timer 2
		using namespace Timer2;
		Timer2::setMode(CTC);
	    Timer2::setPrescaler(_64);
		
	    TIMSK2 |= (1 <<OCIE2A);
 380:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		
		OCR2A = 203;
 38a:	8b ec       	ldi	r24, 0xCB	; 203
 38c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		TCCR1B |=   mode &  ((1 << WGM13) | (1 << WGM12));
		TCCR1B &= ~(mode & ~((1 << WGM13) | (1 << WGM12)));
	}
	
	inline void setPrescaler(Prescaler prescaler) {
		Serial::sendf("T1 set prescaler: 0x%02X\n", prescaler);
 390:	1f 92       	push	r1
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	8f 93       	push	r24
 396:	8a e5       	ldi	r24, 0x5A	; 90
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	9f 93       	push	r25
 39c:	8f 93       	push	r24
 39e:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
		TCCR0B |=   prescaler &  ((1 << CS12) | (1 << CS11) | (1 << CS10));
 3a2:	85 b5       	in	r24, 0x25	; 37
 3a4:	83 60       	ori	r24, 0x03	; 3
 3a6:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(prescaler & ~((1 << CS12) | (1 << CS11) | (1 << CS10)));
 3a8:	85 b5       	in	r24, 0x25	; 37
 3aa:	85 bd       	out	0x25, r24	; 37
		//Timer1::setMode(CTC_OCRA);
		Timer1::setPrescaler(_64);
	    	
	    //TIMSK1 |= (1 << OCIE1A);
	    //OCR1A = (1 << 12) -191;
		OCR1A = 0xfee;
 3ac:	8e ee       	ldi	r24, 0xEE	; 238
 3ae:	9f e0       	ldi	r25, 0x0F	; 15
 3b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		T0_fall			= 0x06,
		T0_rise			= 0x07
	} Prescaler;
	
	inline void setMode(Mode mode) {
		Serial::sendf("T0 set mode: 0x%02X\n", mode);
 3b8:	1f 92       	push	r1
 3ba:	df 93       	push	r29
 3bc:	84 e7       	ldi	r24, 0x74	; 116
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	9f 93       	push	r25
 3c2:	8f 93       	push	r24
 3c4:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
		TCCR0A |=   mode &  ((1 << WGM01) | (1 << WGM00));
 3c8:	84 b5       	in	r24, 0x24	; 36
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	84 bd       	out	0x24, r24	; 36
		TCCR0A &= ~(mode & ~((1 << WGM01) | (1 << WGM00)));
 3ce:	84 b5       	in	r24, 0x24	; 36
 3d0:	84 bd       	out	0x24, r24	; 36
		
		TCCR0B |=   mode &  (1 << WGM02);
 3d2:	85 b5       	in	r24, 0x25	; 37
 3d4:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(mode & ~(1 << WGM02));
 3d6:	85 b5       	in	r24, 0x25	; 37
 3d8:	8d 7f       	andi	r24, 0xFD	; 253
 3da:	85 bd       	out	0x25, r24	; 37

	{	// Setup Timer 0
		using namespace Timer0;
		Timer0::setMode(CTC);
		//Timer0::setPrescaler(Timer0::_256);
		TCCR0B = 4;
 3dc:	c5 bd       	out	0x25, r28	; 37
		Serial::sendf("%i\n",TCCR0B);
 3de:	85 b5       	in	r24, 0x25	; 37
 3e0:	1f 92       	push	r1
 3e2:	8f 93       	push	r24
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	9f 93       	push	r25
 3ea:	8f 93       	push	r24
 3ec:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
		
		OCR0A = 194;
 3f0:	82 ec       	ldi	r24, 0xC2	; 194
 3f2:	87 bd       	out	0x27, r24	; 39
	
		TIMSK0 |= (1 << OCIE0A);
 3f4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	}

	EICRA = (1 << ISC01) | (1 << ISC11) | (1 << ISC00);
 3fe:	8b e0       	ldi	r24, 0x0B	; 11
 400:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= (1 << INT1) | (1 << INT0);
 404:	8d b3       	in	r24, 0x1d	; 29
 406:	83 60       	ori	r24, 0x03	; 3
 408:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 40a:	78 94       	sei
	
	Serial::sendf("0x%08x\n",53.2f);
 40c:	82 e4       	ldi	r24, 0x42	; 66
 40e:	8f 93       	push	r24
 410:	84 e5       	ldi	r24, 0x54	; 84
 412:	8f 93       	push	r24
 414:	8c ec       	ldi	r24, 0xCC	; 204
 416:	8f 93       	push	r24
 418:	8d ec       	ldi	r24, 0xCD	; 205
 41a:	8f 93       	push	r24
 41c:	89 e8       	ldi	r24, 0x89	; 137
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	9f 93       	push	r25
 422:	8f 93       	push	r24
 424:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN6Serial5sendfEPKcz>
 428:	8d b7       	in	r24, 0x3d	; 61
 42a:	9e b7       	in	r25, 0x3e	; 62
 42c:	4a 96       	adiw	r24, 0x1a	; 26
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	9e bf       	out	0x3e, r25	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	8d bf       	out	0x3d, r24	; 61
 438:	ff cf       	rjmp	.-2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

0000043a <_ZN4seg74dispENS_11_7_seg_valsE>:
#include <avr/io.h>
using namespace seg7;

void seg7::disp(_7_seg_vals val)
{
	PORTB = ~num_map[val];
 43a:	e8 2f       	mov	r30, r24
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ef 56       	subi	r30, 0x6F	; 111
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 81       	ld	r24, Z
 444:	80 95       	com	r24
 446:	85 b9       	out	0x05, r24	; 5
 448:	08 95       	ret

0000044a <_ZN6Serial5beginEjNS_4ModeE>:
	}
	return 0ULL;
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 45e:	61 30       	cpi	r22, 0x01	; 1
 460:	09 f4       	brne	.+2      	; 0x464 <_ZN6Serial5beginEjNS_4ModeE+0x1a>
 462:	49 c0       	rjmp	.+146    	; 0x4f6 <_ZN6Serial5beginEjNS_4ModeE+0xac>
 464:	e8 f1       	brcs	.+122    	; 0x4e0 <_ZN6Serial5beginEjNS_4ModeE+0x96>
 466:	62 30       	cpi	r22, 0x02	; 2
 468:	a9 f4       	brne	.+42     	; 0x494 <_ZN6Serial5beginEjNS_4ModeE+0x4a>
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
 46a:	5c 01       	movw	r10, r24
 46c:	c1 2c       	mov	r12, r1
 46e:	d1 2c       	mov	r13, r1
 470:	e1 2c       	mov	r14, r1
 472:	f1 2c       	mov	r15, r1
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	10 e0       	ldi	r17, 0x00	; 0
 478:	28 e4       	ldi	r18, 0x48	; 72
 47a:	38 ee       	ldi	r19, 0xE8	; 232
 47c:	41 e0       	ldi	r20, 0x01	; 1
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 02 03 	call	0x604	; 0x604 <__udivdi3>
 48c:	af ef       	ldi	r26, 0xFF	; 255
 48e:	0e 94 5f 03 	call	0x6be	; 0x6be <__adddi3_s8>
 492:	02 c0       	rjmp	.+4      	; 0x498 <_ZN6Serial5beginEjNS_4ModeE+0x4e>

#define F_CLK 1000000ULL

static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
}

void Serial::begin(uint16_t baudRate, Serial::Mode mode)
{
	uint16_t ubrr = getUBRR(baudRate,mode);
	UBRR0H = (uint8_t)(ubrr >> 8);				// Set Buad Rate
 498:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)ubrr;
 49c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A &= ~(1 << U2X0);						// disable asnyc2x, apparently this can sometimes be necessary
 4a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4a4:	8d 7f       	andi	r24, 0xFD	; 253
 4a6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B |= (1 << RXCIE0);					// Enable receiver interrupt
 4aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		// Enable RX(receiver) and TX(transmitter)
 4b4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4b8:	88 61       	ori	r24, 0x18	; 24
 4ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// set frame: 8bit 1stop
 4be:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4c2:	86 60       	ori	r24, 0x06	; 6
 4c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	sei();
 4c8:	78 94       	sei
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	08 95       	ret
	case Serial::async:
		return F_CLK/16/baudRate - 1;
	case Serial::async2x:
		return F_CLK/8/baudRate - 1;
	case Serial::sync:
		return F_CLK/2/baudRate - 1;
 4e0:	5c 01       	movw	r10, r24
 4e2:	c1 2c       	mov	r12, r1
 4e4:	d1 2c       	mov	r13, r1
 4e6:	e1 2c       	mov	r14, r1
 4e8:	f1 2c       	mov	r15, r1
 4ea:	00 e0       	ldi	r16, 0x00	; 0
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	20 e2       	ldi	r18, 0x20	; 32
 4f0:	31 ea       	ldi	r19, 0xA1	; 161
 4f2:	47 e0       	ldi	r20, 0x07	; 7
 4f4:	c4 cf       	rjmp	.-120    	; 0x47e <_ZN6Serial5beginEjNS_4ModeE+0x34>
static auto getUBRR(uint16_t baudRate, Serial::Mode mode)
{
	switch(mode) 
	{
	case Serial::async:
		return F_CLK/16/baudRate - 1;
 4f6:	5c 01       	movw	r10, r24
 4f8:	c1 2c       	mov	r12, r1
 4fa:	d1 2c       	mov	r13, r1
 4fc:	e1 2c       	mov	r14, r1
 4fe:	f1 2c       	mov	r15, r1
 500:	00 e0       	ldi	r16, 0x00	; 0
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	24 e2       	ldi	r18, 0x24	; 36
 506:	34 ef       	ldi	r19, 0xF4	; 244
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	b9 cf       	rjmp	.-142    	; 0x47e <_ZN6Serial5beginEjNS_4ModeE+0x34>

0000050c <_ZN6Serial4sendEh>:
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 50c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 510:	95 ff       	sbrs	r25, 5
 512:	fc cf       	rjmp	.-8      	; 0x50c <_ZN6Serial4sendEh>
		;
	UDR0 = data;
 514:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return data;
}
 518:	08 95       	ret

0000051a <_ZN6Serial4readEv>:

uint8_t Serial::read()
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 51a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 51e:	85 ff       	sbrs	r24, 5
 520:	fc cf       	rjmp	.-8      	; 0x51a <_ZN6Serial4readEv>
		;
	return UDR0;
 522:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 526:	08 95       	ret

00000528 <_ZN6Serial4sendEPc>:

void Serial::send(char* data)
{
	while(*data)
 528:	fc 01       	movw	r30, r24
 52a:	20 81       	ld	r18, Z
 52c:	22 23       	and	r18, r18
 52e:	51 f0       	breq	.+20     	; 0x544 <_ZN6Serial4sendEPc+0x1c>
 530:	31 96       	adiw	r30, 0x01	; 1
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 532:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 536:	95 ff       	sbrs	r25, 5
 538:	fc cf       	rjmp	.-8      	; 0x532 <_ZN6Serial4sendEPc+0xa>
		;
	UDR0 = data;
 53a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 53e:	21 91       	ld	r18, Z+
 540:	21 11       	cpse	r18, r1
 542:	f7 cf       	rjmp	.-18     	; 0x532 <_ZN6Serial4sendEPc+0xa>
 544:	08 95       	ret

00000546 <_ZN6Serial5sendfEPKcz>:

/** 
 * Note: if the output string is greater than 50 this function calls sprintf twice
 */
void Serial::sendf(char const* format, ...)	// using va_list to minimize program size
{
 546:	af 92       	push	r10
 548:	bf 92       	push	r11
 54a:	cf 92       	push	r12
 54c:	df 92       	push	r13
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	ce 01       	movw	r24, r28
 560:	0d 96       	adiw	r24, 0x0d	; 13
 562:	fc 01       	movw	r30, r24
 564:	c1 90       	ld	r12, Z+
 566:	d1 90       	ld	r13, Z+
 568:	7f 01       	movw	r14, r30
	int size;
	va_list vl;
	va_start(vl,format);
	char *str = (char*)malloc(30);
 56a:	8e e1       	ldi	r24, 0x1E	; 30
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <malloc>
 572:	8c 01       	movw	r16, r24
	if(!((size = vsnprintf(str, 30, format, vl)) < 30))
 574:	97 01       	movw	r18, r14
 576:	a6 01       	movw	r20, r12
 578:	6e e1       	ldi	r22, 0x1E	; 30
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	0e 94 c6 04 	call	0x98c	; 0x98c <vsnprintf>
 580:	5c 01       	movw	r10, r24
 582:	4e 97       	sbiw	r24, 0x1e	; 30
 584:	ec f4       	brge	.+58     	; 0x5c0 <_ZN6Serial5sendfEPKcz+0x7a>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 586:	f8 01       	movw	r30, r16
 588:	90 81       	ld	r25, Z
 58a:	99 23       	and	r25, r25
 58c:	59 f0       	breq	.+22     	; 0x5a4 <_ZN6Serial5sendfEPKcz+0x5e>
 58e:	f8 01       	movw	r30, r16
 590:	31 96       	adiw	r30, 0x01	; 1
	sei();
}

uint8_t Serial::send(uint8_t const data)
{
	while( !( UCSR0A & (1 << UDRE0) ) )
 592:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 596:	85 ff       	sbrs	r24, 5
 598:	fc cf       	rjmp	.-8      	; 0x592 <_ZN6Serial5sendfEPKcz+0x4c>
		;
	UDR0 = data;
 59a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return UDR0;
}

void Serial::send(char* data)
{
	while(*data)
 59e:	91 91       	ld	r25, Z+
 5a0:	91 11       	cpse	r25, r1
 5a2:	f7 cf       	rjmp	.-18     	; 0x592 <_ZN6Serial5sendfEPKcz+0x4c>
		str = (char*)malloc(size);
		vsprintf(str, format, vl);
	}
	
	send(str);
	free(str);
 5a4:	c8 01       	movw	r24, r16
 5a6:	0e 94 17 04 	call	0x82e	; 0x82e <free>
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	df 90       	pop	r13
 5b8:	cf 90       	pop	r12
 5ba:	bf 90       	pop	r11
 5bc:	af 90       	pop	r10
 5be:	08 95       	ret
	va_list vl;
	va_start(vl,format);
	char *str = (char*)malloc(30);
	if(!((size = vsnprintf(str, 30, format, vl)) < 30))
	{
		free(str);
 5c0:	c8 01       	movw	r24, r16
 5c2:	0e 94 17 04 	call	0x82e	; 0x82e <free>
		str = (char*)malloc(size);
 5c6:	c5 01       	movw	r24, r10
 5c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <malloc>
 5cc:	8c 01       	movw	r16, r24
		vsprintf(str, format, vl);
 5ce:	a7 01       	movw	r20, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vsprintf>
 5d6:	d7 cf       	rjmp	.-82     	; 0x586 <_ZN6Serial5sendfEPKcz+0x40>

000005d8 <__divmodhi4>:
 5d8:	97 fb       	bst	r25, 7
 5da:	07 2e       	mov	r0, r23
 5dc:	16 f4       	brtc	.+4      	; 0x5e2 <__divmodhi4+0xa>
 5de:	00 94       	com	r0
 5e0:	07 d0       	rcall	.+14     	; 0x5f0 <__divmodhi4_neg1>
 5e2:	77 fd       	sbrc	r23, 7
 5e4:	09 d0       	rcall	.+18     	; 0x5f8 <__divmodhi4_neg2>
 5e6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__udivmodhi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	05 d0       	rcall	.+10     	; 0x5f8 <__divmodhi4_neg2>
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__divmodhi4_exit>

000005f0 <__divmodhi4_neg1>:
 5f0:	90 95       	com	r25
 5f2:	81 95       	neg	r24
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__divmodhi4_neg2>:
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255

000005fe <__divmodhi4_exit>:
 5fe:	08 95       	ret

00000600 <__umoddi3>:
 600:	68 94       	set
 602:	01 c0       	rjmp	.+2      	; 0x606 <__udivdi3_umoddi3>

00000604 <__udivdi3>:
 604:	e8 94       	clt

00000606 <__udivdi3_umoddi3>:
 606:	8f 92       	push	r8
 608:	9f 92       	push	r9
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	0e 94 0e 03 	call	0x61c	; 0x61c <__udivmod64>
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	9f 90       	pop	r9
 618:	8f 90       	pop	r8
 61a:	08 95       	ret

0000061c <__udivmod64>:
 61c:	88 24       	eor	r8, r8
 61e:	99 24       	eor	r9, r9
 620:	f4 01       	movw	r30, r8
 622:	e4 01       	movw	r28, r8
 624:	b0 e4       	ldi	r27, 0x40	; 64
 626:	9f 93       	push	r25
 628:	aa 27       	eor	r26, r26
 62a:	9a 15       	cp	r25, r10
 62c:	8b 04       	cpc	r8, r11
 62e:	9c 04       	cpc	r9, r12
 630:	ed 05       	cpc	r30, r13
 632:	fe 05       	cpc	r31, r14
 634:	cf 05       	cpc	r28, r15
 636:	d0 07       	cpc	r29, r16
 638:	a1 07       	cpc	r26, r17
 63a:	98 f4       	brcc	.+38     	; 0x662 <__udivmod64+0x46>
 63c:	ad 2f       	mov	r26, r29
 63e:	dc 2f       	mov	r29, r28
 640:	cf 2f       	mov	r28, r31
 642:	fe 2f       	mov	r31, r30
 644:	e9 2d       	mov	r30, r9
 646:	98 2c       	mov	r9, r8
 648:	89 2e       	mov	r8, r25
 64a:	98 2f       	mov	r25, r24
 64c:	87 2f       	mov	r24, r23
 64e:	76 2f       	mov	r23, r22
 650:	65 2f       	mov	r22, r21
 652:	54 2f       	mov	r21, r20
 654:	43 2f       	mov	r20, r19
 656:	32 2f       	mov	r19, r18
 658:	22 27       	eor	r18, r18
 65a:	b8 50       	subi	r27, 0x08	; 8
 65c:	31 f7       	brne	.-52     	; 0x62a <__udivmod64+0xe>
 65e:	bf 91       	pop	r27
 660:	27 c0       	rjmp	.+78     	; 0x6b0 <__udivmod64+0x94>
 662:	1b 2e       	mov	r1, r27
 664:	bf 91       	pop	r27
 666:	bb 27       	eor	r27, r27
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	44 1f       	adc	r20, r20
 66e:	55 1f       	adc	r21, r21
 670:	66 1f       	adc	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	88 1c       	adc	r8, r8
 67a:	99 1c       	adc	r9, r9
 67c:	ee 1f       	adc	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	cc 1f       	adc	r28, r28
 682:	dd 1f       	adc	r29, r29
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	8a 14       	cp	r8, r10
 68a:	9b 04       	cpc	r9, r11
 68c:	ec 05       	cpc	r30, r12
 68e:	fd 05       	cpc	r31, r13
 690:	ce 05       	cpc	r28, r14
 692:	df 05       	cpc	r29, r15
 694:	a0 07       	cpc	r26, r16
 696:	b1 07       	cpc	r27, r17
 698:	48 f0       	brcs	.+18     	; 0x6ac <__udivmod64+0x90>
 69a:	8a 18       	sub	r8, r10
 69c:	9b 08       	sbc	r9, r11
 69e:	ec 09       	sbc	r30, r12
 6a0:	fd 09       	sbc	r31, r13
 6a2:	ce 09       	sbc	r28, r14
 6a4:	df 09       	sbc	r29, r15
 6a6:	a0 0b       	sbc	r26, r16
 6a8:	b1 0b       	sbc	r27, r17
 6aa:	21 60       	ori	r18, 0x01	; 1
 6ac:	1a 94       	dec	r1
 6ae:	e1 f6       	brne	.-72     	; 0x668 <__udivmod64+0x4c>
 6b0:	2e f4       	brtc	.+10     	; 0x6bc <__udivmod64+0xa0>
 6b2:	94 01       	movw	r18, r8
 6b4:	af 01       	movw	r20, r30
 6b6:	be 01       	movw	r22, r28
 6b8:	cd 01       	movw	r24, r26
 6ba:	00 0c       	add	r0, r0
 6bc:	08 95       	ret

000006be <__adddi3_s8>:
 6be:	00 24       	eor	r0, r0
 6c0:	a7 fd       	sbrc	r26, 7
 6c2:	00 94       	com	r0
 6c4:	2a 0f       	add	r18, r26
 6c6:	30 1d       	adc	r19, r0
 6c8:	40 1d       	adc	r20, r0
 6ca:	50 1d       	adc	r21, r0
 6cc:	60 1d       	adc	r22, r0
 6ce:	70 1d       	adc	r23, r0
 6d0:	80 1d       	adc	r24, r0
 6d2:	90 1d       	adc	r25, r0
 6d4:	08 95       	ret

000006d6 <__udivmodhi4>:
 6d6:	aa 1b       	sub	r26, r26
 6d8:	bb 1b       	sub	r27, r27
 6da:	51 e1       	ldi	r21, 0x11	; 17
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <__udivmodhi4_ep>

000006de <__udivmodhi4_loop>:
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	a6 17       	cp	r26, r22
 6e4:	b7 07       	cpc	r27, r23
 6e6:	10 f0       	brcs	.+4      	; 0x6ec <__udivmodhi4_ep>
 6e8:	a6 1b       	sub	r26, r22
 6ea:	b7 0b       	sbc	r27, r23

000006ec <__udivmodhi4_ep>:
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	5a 95       	dec	r21
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__udivmodhi4_loop>
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	bc 01       	movw	r22, r24
 6fa:	cd 01       	movw	r24, r26
 6fc:	08 95       	ret

000006fe <malloc>:
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	91 05       	cpc	r25, r1
 70a:	10 f4       	brcc	.+4      	; 0x710 <malloc+0x12>
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__flp>
 714:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__flp+0x1>
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	19 f1       	breq	.+70     	; 0x76a <malloc+0x6c>
 724:	40 81       	ld	r20, Z
 726:	51 81       	ldd	r21, Z+1	; 0x01
 728:	02 81       	ldd	r16, Z+2	; 0x02
 72a:	13 81       	ldd	r17, Z+3	; 0x03
 72c:	48 17       	cp	r20, r24
 72e:	59 07       	cpc	r21, r25
 730:	c8 f0       	brcs	.+50     	; 0x764 <malloc+0x66>
 732:	84 17       	cp	r24, r20
 734:	95 07       	cpc	r25, r21
 736:	69 f4       	brne	.+26     	; 0x752 <malloc+0x54>
 738:	10 97       	sbiw	r26, 0x00	; 0
 73a:	31 f0       	breq	.+12     	; 0x748 <malloc+0x4a>
 73c:	12 96       	adiw	r26, 0x02	; 2
 73e:	0c 93       	st	X, r16
 740:	12 97       	sbiw	r26, 0x02	; 2
 742:	13 96       	adiw	r26, 0x03	; 3
 744:	1c 93       	st	X, r17
 746:	27 c0       	rjmp	.+78     	; 0x796 <malloc+0x98>
 748:	00 93 a7 01 	sts	0x01A7, r16	; 0x8001a7 <__flp>
 74c:	10 93 a8 01 	sts	0x01A8, r17	; 0x8001a8 <__flp+0x1>
 750:	22 c0       	rjmp	.+68     	; 0x796 <malloc+0x98>
 752:	21 15       	cp	r18, r1
 754:	31 05       	cpc	r19, r1
 756:	19 f0       	breq	.+6      	; 0x75e <malloc+0x60>
 758:	42 17       	cp	r20, r18
 75a:	53 07       	cpc	r21, r19
 75c:	18 f4       	brcc	.+6      	; 0x764 <malloc+0x66>
 75e:	9a 01       	movw	r18, r20
 760:	bd 01       	movw	r22, r26
 762:	ef 01       	movw	r28, r30
 764:	df 01       	movw	r26, r30
 766:	f8 01       	movw	r30, r16
 768:	db cf       	rjmp	.-74     	; 0x720 <malloc+0x22>
 76a:	21 15       	cp	r18, r1
 76c:	31 05       	cpc	r19, r1
 76e:	f9 f0       	breq	.+62     	; 0x7ae <malloc+0xb0>
 770:	28 1b       	sub	r18, r24
 772:	39 0b       	sbc	r19, r25
 774:	24 30       	cpi	r18, 0x04	; 4
 776:	31 05       	cpc	r19, r1
 778:	80 f4       	brcc	.+32     	; 0x79a <malloc+0x9c>
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	9b 81       	ldd	r25, Y+3	; 0x03
 77e:	61 15       	cp	r22, r1
 780:	71 05       	cpc	r23, r1
 782:	21 f0       	breq	.+8      	; 0x78c <malloc+0x8e>
 784:	fb 01       	movw	r30, r22
 786:	93 83       	std	Z+3, r25	; 0x03
 788:	82 83       	std	Z+2, r24	; 0x02
 78a:	04 c0       	rjmp	.+8      	; 0x794 <malloc+0x96>
 78c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__flp+0x1>
 790:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__flp>
 794:	fe 01       	movw	r30, r28
 796:	32 96       	adiw	r30, 0x02	; 2
 798:	44 c0       	rjmp	.+136    	; 0x822 <malloc+0x124>
 79a:	fe 01       	movw	r30, r28
 79c:	e2 0f       	add	r30, r18
 79e:	f3 1f       	adc	r31, r19
 7a0:	81 93       	st	Z+, r24
 7a2:	91 93       	st	Z+, r25
 7a4:	22 50       	subi	r18, 0x02	; 2
 7a6:	31 09       	sbc	r19, r1
 7a8:	39 83       	std	Y+1, r19	; 0x01
 7aa:	28 83       	st	Y, r18
 7ac:	3a c0       	rjmp	.+116    	; 0x822 <malloc+0x124>
 7ae:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
 7b2:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
 7b6:	23 2b       	or	r18, r19
 7b8:	41 f4       	brne	.+16     	; 0x7ca <malloc+0xcc>
 7ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7c2:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <__brkval+0x1>
 7c6:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <__brkval>
 7ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7d2:	21 15       	cp	r18, r1
 7d4:	31 05       	cpc	r19, r1
 7d6:	41 f4       	brne	.+16     	; 0x7e8 <malloc+0xea>
 7d8:	2d b7       	in	r18, 0x3d	; 61
 7da:	3e b7       	in	r19, 0x3e	; 62
 7dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7e4:	24 1b       	sub	r18, r20
 7e6:	35 0b       	sbc	r19, r21
 7e8:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <__brkval>
 7ec:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <__brkval+0x1>
 7f0:	e2 17       	cp	r30, r18
 7f2:	f3 07       	cpc	r31, r19
 7f4:	a0 f4       	brcc	.+40     	; 0x81e <malloc+0x120>
 7f6:	2e 1b       	sub	r18, r30
 7f8:	3f 0b       	sbc	r19, r31
 7fa:	28 17       	cp	r18, r24
 7fc:	39 07       	cpc	r19, r25
 7fe:	78 f0       	brcs	.+30     	; 0x81e <malloc+0x120>
 800:	ac 01       	movw	r20, r24
 802:	4e 5f       	subi	r20, 0xFE	; 254
 804:	5f 4f       	sbci	r21, 0xFF	; 255
 806:	24 17       	cp	r18, r20
 808:	35 07       	cpc	r19, r21
 80a:	48 f0       	brcs	.+18     	; 0x81e <malloc+0x120>
 80c:	4e 0f       	add	r20, r30
 80e:	5f 1f       	adc	r21, r31
 810:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
 814:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
 818:	81 93       	st	Z+, r24
 81a:	91 93       	st	Z+, r25
 81c:	02 c0       	rjmp	.+4      	; 0x822 <malloc+0x124>
 81e:	e0 e0       	ldi	r30, 0x00	; 0
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	cf 01       	movw	r24, r30
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <free>:
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	00 97       	sbiw	r24, 0x00	; 0
 834:	09 f4       	brne	.+2      	; 0x838 <free+0xa>
 836:	81 c0       	rjmp	.+258    	; 0x93a <__stack+0x3b>
 838:	fc 01       	movw	r30, r24
 83a:	32 97       	sbiw	r30, 0x02	; 2
 83c:	13 82       	std	Z+3, r1	; 0x03
 83e:	12 82       	std	Z+2, r1	; 0x02
 840:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <__flp>
 844:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <__flp+0x1>
 848:	10 97       	sbiw	r26, 0x00	; 0
 84a:	81 f4       	brne	.+32     	; 0x86c <free+0x3e>
 84c:	20 81       	ld	r18, Z
 84e:	31 81       	ldd	r19, Z+1	; 0x01
 850:	82 0f       	add	r24, r18
 852:	93 1f       	adc	r25, r19
 854:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
 858:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
 85c:	28 17       	cp	r18, r24
 85e:	39 07       	cpc	r19, r25
 860:	51 f5       	brne	.+84     	; 0x8b6 <free+0x88>
 862:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__brkval+0x1>
 866:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__brkval>
 86a:	67 c0       	rjmp	.+206    	; 0x93a <__stack+0x3b>
 86c:	ed 01       	movw	r28, r26
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	ce 17       	cp	r28, r30
 874:	df 07       	cpc	r29, r31
 876:	40 f4       	brcc	.+16     	; 0x888 <free+0x5a>
 878:	4a 81       	ldd	r20, Y+2	; 0x02
 87a:	5b 81       	ldd	r21, Y+3	; 0x03
 87c:	9e 01       	movw	r18, r28
 87e:	41 15       	cp	r20, r1
 880:	51 05       	cpc	r21, r1
 882:	f1 f0       	breq	.+60     	; 0x8c0 <free+0x92>
 884:	ea 01       	movw	r28, r20
 886:	f5 cf       	rjmp	.-22     	; 0x872 <free+0x44>
 888:	d3 83       	std	Z+3, r29	; 0x03
 88a:	c2 83       	std	Z+2, r28	; 0x02
 88c:	40 81       	ld	r20, Z
 88e:	51 81       	ldd	r21, Z+1	; 0x01
 890:	84 0f       	add	r24, r20
 892:	95 1f       	adc	r25, r21
 894:	c8 17       	cp	r28, r24
 896:	d9 07       	cpc	r29, r25
 898:	59 f4       	brne	.+22     	; 0x8b0 <free+0x82>
 89a:	88 81       	ld	r24, Y
 89c:	99 81       	ldd	r25, Y+1	; 0x01
 89e:	84 0f       	add	r24, r20
 8a0:	95 1f       	adc	r25, r21
 8a2:	02 96       	adiw	r24, 0x02	; 2
 8a4:	91 83       	std	Z+1, r25	; 0x01
 8a6:	80 83       	st	Z, r24
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	9b 81       	ldd	r25, Y+3	; 0x03
 8ac:	93 83       	std	Z+3, r25	; 0x03
 8ae:	82 83       	std	Z+2, r24	; 0x02
 8b0:	21 15       	cp	r18, r1
 8b2:	31 05       	cpc	r19, r1
 8b4:	29 f4       	brne	.+10     	; 0x8c0 <free+0x92>
 8b6:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__flp+0x1>
 8ba:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__flp>
 8be:	3d c0       	rjmp	.+122    	; 0x93a <__stack+0x3b>
 8c0:	e9 01       	movw	r28, r18
 8c2:	fb 83       	std	Y+3, r31	; 0x03
 8c4:	ea 83       	std	Y+2, r30	; 0x02
 8c6:	49 91       	ld	r20, Y+
 8c8:	59 91       	ld	r21, Y+
 8ca:	c4 0f       	add	r28, r20
 8cc:	d5 1f       	adc	r29, r21
 8ce:	ec 17       	cp	r30, r28
 8d0:	fd 07       	cpc	r31, r29
 8d2:	61 f4       	brne	.+24     	; 0x8ec <free+0xbe>
 8d4:	80 81       	ld	r24, Z
 8d6:	91 81       	ldd	r25, Z+1	; 0x01
 8d8:	84 0f       	add	r24, r20
 8da:	95 1f       	adc	r25, r21
 8dc:	02 96       	adiw	r24, 0x02	; 2
 8de:	e9 01       	movw	r28, r18
 8e0:	99 83       	std	Y+1, r25	; 0x01
 8e2:	88 83       	st	Y, r24
 8e4:	82 81       	ldd	r24, Z+2	; 0x02
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
 8e8:	9b 83       	std	Y+3, r25	; 0x03
 8ea:	8a 83       	std	Y+2, r24	; 0x02
 8ec:	e0 e0       	ldi	r30, 0x00	; 0
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	12 96       	adiw	r26, 0x02	; 2
 8f2:	8d 91       	ld	r24, X+
 8f4:	9c 91       	ld	r25, X
 8f6:	13 97       	sbiw	r26, 0x03	; 3
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	19 f0       	breq	.+6      	; 0x902 <__stack+0x3>
 8fc:	fd 01       	movw	r30, r26
 8fe:	dc 01       	movw	r26, r24
 900:	f7 cf       	rjmp	.-18     	; 0x8f0 <free+0xc2>
 902:	8d 91       	ld	r24, X+
 904:	9c 91       	ld	r25, X
 906:	11 97       	sbiw	r26, 0x01	; 1
 908:	9d 01       	movw	r18, r26
 90a:	2e 5f       	subi	r18, 0xFE	; 254
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	82 0f       	add	r24, r18
 910:	93 1f       	adc	r25, r19
 912:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
 916:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
 91a:	28 17       	cp	r18, r24
 91c:	39 07       	cpc	r19, r25
 91e:	69 f4       	brne	.+26     	; 0x93a <__stack+0x3b>
 920:	30 97       	sbiw	r30, 0x00	; 0
 922:	29 f4       	brne	.+10     	; 0x92e <__stack+0x2f>
 924:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__flp+0x1>
 928:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__flp>
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
 92e:	13 82       	std	Z+3, r1	; 0x03
 930:	12 82       	std	Z+2, r1	; 0x02
 932:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__brkval+0x1>
 936:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__brkval>
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <atoi>:
 940:	fc 01       	movw	r30, r24
 942:	88 27       	eor	r24, r24
 944:	99 27       	eor	r25, r25
 946:	e8 94       	clt
 948:	21 91       	ld	r18, Z+
 94a:	20 32       	cpi	r18, 0x20	; 32
 94c:	e9 f3       	breq	.-6      	; 0x948 <atoi+0x8>
 94e:	29 30       	cpi	r18, 0x09	; 9
 950:	10 f0       	brcs	.+4      	; 0x956 <atoi+0x16>
 952:	2e 30       	cpi	r18, 0x0E	; 14
 954:	c8 f3       	brcs	.-14     	; 0x948 <atoi+0x8>
 956:	2b 32       	cpi	r18, 0x2B	; 43
 958:	41 f0       	breq	.+16     	; 0x96a <atoi+0x2a>
 95a:	2d 32       	cpi	r18, 0x2D	; 45
 95c:	39 f4       	brne	.+14     	; 0x96c <atoi+0x2c>
 95e:	68 94       	set
 960:	04 c0       	rjmp	.+8      	; 0x96a <atoi+0x2a>
 962:	0e 94 be 04 	call	0x97c	; 0x97c <__mulhi_const_10>
 966:	82 0f       	add	r24, r18
 968:	91 1d       	adc	r25, r1
 96a:	21 91       	ld	r18, Z+
 96c:	20 53       	subi	r18, 0x30	; 48
 96e:	2a 30       	cpi	r18, 0x0A	; 10
 970:	c0 f3       	brcs	.-16     	; 0x962 <atoi+0x22>
 972:	1e f4       	brtc	.+6      	; 0x97a <atoi+0x3a>
 974:	90 95       	com	r25
 976:	81 95       	neg	r24
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <__mulhi_const_10>:
 97c:	7a e0       	ldi	r23, 0x0A	; 10
 97e:	97 9f       	mul	r25, r23
 980:	90 2d       	mov	r25, r0
 982:	87 9f       	mul	r24, r23
 984:	80 2d       	mov	r24, r0
 986:	91 0d       	add	r25, r1
 988:	11 24       	eor	r1, r1
 98a:	08 95       	ret

0000098c <vsnprintf>:
 98c:	ae e0       	ldi	r26, 0x0E	; 14
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	ec ec       	ldi	r30, 0xCC	; 204
 992:	f4 e0       	ldi	r31, 0x04	; 4
 994:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__prologue_saves__+0x1c>
 998:	8c 01       	movw	r16, r24
 99a:	fa 01       	movw	r30, r20
 99c:	86 e0       	ldi	r24, 0x06	; 6
 99e:	8c 83       	std	Y+4, r24	; 0x04
 9a0:	1a 83       	std	Y+2, r17	; 0x02
 9a2:	09 83       	std	Y+1, r16	; 0x01
 9a4:	77 ff       	sbrs	r23, 7
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <vsnprintf+0x20>
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	70 e8       	ldi	r23, 0x80	; 128
 9ac:	cb 01       	movw	r24, r22
 9ae:	01 97       	sbiw	r24, 0x01	; 1
 9b0:	9e 83       	std	Y+6, r25	; 0x06
 9b2:	8d 83       	std	Y+5, r24	; 0x05
 9b4:	a9 01       	movw	r20, r18
 9b6:	bf 01       	movw	r22, r30
 9b8:	ce 01       	movw	r24, r28
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <vfprintf>
 9c0:	4d 81       	ldd	r20, Y+5	; 0x05
 9c2:	5e 81       	ldd	r21, Y+6	; 0x06
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	0a c0       	rjmp	.+20     	; 0x9dc <vsnprintf+0x50>
 9c8:	2f 81       	ldd	r18, Y+7	; 0x07
 9ca:	38 85       	ldd	r19, Y+8	; 0x08
 9cc:	42 17       	cp	r20, r18
 9ce:	53 07       	cpc	r21, r19
 9d0:	0c f4       	brge	.+2      	; 0x9d4 <vsnprintf+0x48>
 9d2:	9a 01       	movw	r18, r20
 9d4:	f8 01       	movw	r30, r16
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	10 82       	st	Z, r1
 9dc:	2e 96       	adiw	r28, 0x0e	; 14
 9de:	e4 e0       	ldi	r30, 0x04	; 4
 9e0:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__epilogue_restores__+0x1c>

000009e4 <vsprintf>:
 9e4:	ae e0       	ldi	r26, 0x0E	; 14
 9e6:	b0 e0       	ldi	r27, 0x00	; 0
 9e8:	e8 ef       	ldi	r30, 0xF8	; 248
 9ea:	f4 e0       	ldi	r31, 0x04	; 4
 9ec:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__prologue_saves__+0x1c>
 9f0:	8c 01       	movw	r16, r24
 9f2:	86 e0       	ldi	r24, 0x06	; 6
 9f4:	8c 83       	std	Y+4, r24	; 0x04
 9f6:	1a 83       	std	Y+2, r17	; 0x02
 9f8:	09 83       	std	Y+1, r16	; 0x01
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f e7       	ldi	r25, 0x7F	; 127
 9fe:	9e 83       	std	Y+6, r25	; 0x06
 a00:	8d 83       	std	Y+5, r24	; 0x05
 a02:	ce 01       	movw	r24, r28
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	0e 94 0e 05 	call	0xa1c	; 0xa1c <vfprintf>
 a0a:	ef 81       	ldd	r30, Y+7	; 0x07
 a0c:	f8 85       	ldd	r31, Y+8	; 0x08
 a0e:	e0 0f       	add	r30, r16
 a10:	f1 1f       	adc	r31, r17
 a12:	10 82       	st	Z, r1
 a14:	2e 96       	adiw	r28, 0x0e	; 14
 a16:	e4 e0       	ldi	r30, 0x04	; 4
 a18:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__epilogue_restores__+0x1c>

00000a1c <vfprintf>:
 a1c:	ab e0       	ldi	r26, 0x0B	; 11
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e4 e1       	ldi	r30, 0x14	; 20
 a22:	f5 e0       	ldi	r31, 0x05	; 5
 a24:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__prologue_saves__>
 a28:	6c 01       	movw	r12, r24
 a2a:	7b 01       	movw	r14, r22
 a2c:	8a 01       	movw	r16, r20
 a2e:	fc 01       	movw	r30, r24
 a30:	17 82       	std	Z+7, r1	; 0x07
 a32:	16 82       	std	Z+6, r1	; 0x06
 a34:	83 81       	ldd	r24, Z+3	; 0x03
 a36:	81 ff       	sbrs	r24, 1
 a38:	cc c1       	rjmp	.+920    	; 0xdd2 <vfprintf+0x3b6>
 a3a:	ce 01       	movw	r24, r28
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	3c 01       	movw	r6, r24
 a40:	f6 01       	movw	r30, r12
 a42:	93 81       	ldd	r25, Z+3	; 0x03
 a44:	f7 01       	movw	r30, r14
 a46:	93 fd       	sbrc	r25, 3
 a48:	85 91       	lpm	r24, Z+
 a4a:	93 ff       	sbrs	r25, 3
 a4c:	81 91       	ld	r24, Z+
 a4e:	7f 01       	movw	r14, r30
 a50:	88 23       	and	r24, r24
 a52:	09 f4       	brne	.+2      	; 0xa56 <vfprintf+0x3a>
 a54:	ba c1       	rjmp	.+884    	; 0xdca <vfprintf+0x3ae>
 a56:	85 32       	cpi	r24, 0x25	; 37
 a58:	39 f4       	brne	.+14     	; 0xa68 <vfprintf+0x4c>
 a5a:	93 fd       	sbrc	r25, 3
 a5c:	85 91       	lpm	r24, Z+
 a5e:	93 ff       	sbrs	r25, 3
 a60:	81 91       	ld	r24, Z+
 a62:	7f 01       	movw	r14, r30
 a64:	85 32       	cpi	r24, 0x25	; 37
 a66:	29 f4       	brne	.+10     	; 0xa72 <vfprintf+0x56>
 a68:	b6 01       	movw	r22, r12
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 a70:	e7 cf       	rjmp	.-50     	; 0xa40 <vfprintf+0x24>
 a72:	91 2c       	mov	r9, r1
 a74:	21 2c       	mov	r2, r1
 a76:	31 2c       	mov	r3, r1
 a78:	ff e1       	ldi	r31, 0x1F	; 31
 a7a:	f3 15       	cp	r31, r3
 a7c:	d8 f0       	brcs	.+54     	; 0xab4 <vfprintf+0x98>
 a7e:	8b 32       	cpi	r24, 0x2B	; 43
 a80:	79 f0       	breq	.+30     	; 0xaa0 <vfprintf+0x84>
 a82:	38 f4       	brcc	.+14     	; 0xa92 <vfprintf+0x76>
 a84:	80 32       	cpi	r24, 0x20	; 32
 a86:	79 f0       	breq	.+30     	; 0xaa6 <vfprintf+0x8a>
 a88:	83 32       	cpi	r24, 0x23	; 35
 a8a:	a1 f4       	brne	.+40     	; 0xab4 <vfprintf+0x98>
 a8c:	23 2d       	mov	r18, r3
 a8e:	20 61       	ori	r18, 0x10	; 16
 a90:	1d c0       	rjmp	.+58     	; 0xacc <vfprintf+0xb0>
 a92:	8d 32       	cpi	r24, 0x2D	; 45
 a94:	61 f0       	breq	.+24     	; 0xaae <vfprintf+0x92>
 a96:	80 33       	cpi	r24, 0x30	; 48
 a98:	69 f4       	brne	.+26     	; 0xab4 <vfprintf+0x98>
 a9a:	23 2d       	mov	r18, r3
 a9c:	21 60       	ori	r18, 0x01	; 1
 a9e:	16 c0       	rjmp	.+44     	; 0xacc <vfprintf+0xb0>
 aa0:	83 2d       	mov	r24, r3
 aa2:	82 60       	ori	r24, 0x02	; 2
 aa4:	38 2e       	mov	r3, r24
 aa6:	e3 2d       	mov	r30, r3
 aa8:	e4 60       	ori	r30, 0x04	; 4
 aaa:	3e 2e       	mov	r3, r30
 aac:	2a c0       	rjmp	.+84     	; 0xb02 <vfprintf+0xe6>
 aae:	f3 2d       	mov	r31, r3
 ab0:	f8 60       	ori	r31, 0x08	; 8
 ab2:	1d c0       	rjmp	.+58     	; 0xaee <vfprintf+0xd2>
 ab4:	37 fc       	sbrc	r3, 7
 ab6:	2d c0       	rjmp	.+90     	; 0xb12 <vfprintf+0xf6>
 ab8:	20 ed       	ldi	r18, 0xD0	; 208
 aba:	28 0f       	add	r18, r24
 abc:	2a 30       	cpi	r18, 0x0A	; 10
 abe:	40 f0       	brcs	.+16     	; 0xad0 <vfprintf+0xb4>
 ac0:	8e 32       	cpi	r24, 0x2E	; 46
 ac2:	b9 f4       	brne	.+46     	; 0xaf2 <vfprintf+0xd6>
 ac4:	36 fc       	sbrc	r3, 6
 ac6:	81 c1       	rjmp	.+770    	; 0xdca <vfprintf+0x3ae>
 ac8:	23 2d       	mov	r18, r3
 aca:	20 64       	ori	r18, 0x40	; 64
 acc:	32 2e       	mov	r3, r18
 ace:	19 c0       	rjmp	.+50     	; 0xb02 <vfprintf+0xe6>
 ad0:	36 fe       	sbrs	r3, 6
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0xc4>
 ad4:	8a e0       	ldi	r24, 0x0A	; 10
 ad6:	98 9e       	mul	r9, r24
 ad8:	20 0d       	add	r18, r0
 ada:	11 24       	eor	r1, r1
 adc:	92 2e       	mov	r9, r18
 ade:	11 c0       	rjmp	.+34     	; 0xb02 <vfprintf+0xe6>
 ae0:	ea e0       	ldi	r30, 0x0A	; 10
 ae2:	2e 9e       	mul	r2, r30
 ae4:	20 0d       	add	r18, r0
 ae6:	11 24       	eor	r1, r1
 ae8:	22 2e       	mov	r2, r18
 aea:	f3 2d       	mov	r31, r3
 aec:	f0 62       	ori	r31, 0x20	; 32
 aee:	3f 2e       	mov	r3, r31
 af0:	08 c0       	rjmp	.+16     	; 0xb02 <vfprintf+0xe6>
 af2:	8c 36       	cpi	r24, 0x6C	; 108
 af4:	21 f4       	brne	.+8      	; 0xafe <vfprintf+0xe2>
 af6:	83 2d       	mov	r24, r3
 af8:	80 68       	ori	r24, 0x80	; 128
 afa:	38 2e       	mov	r3, r24
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0xe6>
 afe:	88 36       	cpi	r24, 0x68	; 104
 b00:	41 f4       	brne	.+16     	; 0xb12 <vfprintf+0xf6>
 b02:	f7 01       	movw	r30, r14
 b04:	93 fd       	sbrc	r25, 3
 b06:	85 91       	lpm	r24, Z+
 b08:	93 ff       	sbrs	r25, 3
 b0a:	81 91       	ld	r24, Z+
 b0c:	7f 01       	movw	r14, r30
 b0e:	81 11       	cpse	r24, r1
 b10:	b3 cf       	rjmp	.-154    	; 0xa78 <vfprintf+0x5c>
 b12:	98 2f       	mov	r25, r24
 b14:	9f 7d       	andi	r25, 0xDF	; 223
 b16:	95 54       	subi	r25, 0x45	; 69
 b18:	93 30       	cpi	r25, 0x03	; 3
 b1a:	28 f4       	brcc	.+10     	; 0xb26 <vfprintf+0x10a>
 b1c:	0c 5f       	subi	r16, 0xFC	; 252
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	9f e3       	ldi	r25, 0x3F	; 63
 b22:	99 83       	std	Y+1, r25	; 0x01
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <vfprintf+0x124>
 b26:	83 36       	cpi	r24, 0x63	; 99
 b28:	31 f0       	breq	.+12     	; 0xb36 <vfprintf+0x11a>
 b2a:	83 37       	cpi	r24, 0x73	; 115
 b2c:	71 f0       	breq	.+28     	; 0xb4a <vfprintf+0x12e>
 b2e:	83 35       	cpi	r24, 0x53	; 83
 b30:	09 f0       	breq	.+2      	; 0xb34 <vfprintf+0x118>
 b32:	59 c0       	rjmp	.+178    	; 0xbe6 <vfprintf+0x1ca>
 b34:	21 c0       	rjmp	.+66     	; 0xb78 <vfprintf+0x15c>
 b36:	f8 01       	movw	r30, r16
 b38:	80 81       	ld	r24, Z
 b3a:	89 83       	std	Y+1, r24	; 0x01
 b3c:	0e 5f       	subi	r16, 0xFE	; 254
 b3e:	1f 4f       	sbci	r17, 0xFF	; 255
 b40:	88 24       	eor	r8, r8
 b42:	83 94       	inc	r8
 b44:	91 2c       	mov	r9, r1
 b46:	53 01       	movw	r10, r6
 b48:	13 c0       	rjmp	.+38     	; 0xb70 <vfprintf+0x154>
 b4a:	28 01       	movw	r4, r16
 b4c:	f2 e0       	ldi	r31, 0x02	; 2
 b4e:	4f 0e       	add	r4, r31
 b50:	51 1c       	adc	r5, r1
 b52:	f8 01       	movw	r30, r16
 b54:	a0 80       	ld	r10, Z
 b56:	b1 80       	ldd	r11, Z+1	; 0x01
 b58:	36 fe       	sbrs	r3, 6
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <vfprintf+0x146>
 b5c:	69 2d       	mov	r22, r9
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x14a>
 b62:	6f ef       	ldi	r22, 0xFF	; 255
 b64:	7f ef       	ldi	r23, 0xFF	; 255
 b66:	c5 01       	movw	r24, r10
 b68:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strnlen>
 b6c:	4c 01       	movw	r8, r24
 b6e:	82 01       	movw	r16, r4
 b70:	f3 2d       	mov	r31, r3
 b72:	ff 77       	andi	r31, 0x7F	; 127
 b74:	3f 2e       	mov	r3, r31
 b76:	16 c0       	rjmp	.+44     	; 0xba4 <vfprintf+0x188>
 b78:	28 01       	movw	r4, r16
 b7a:	22 e0       	ldi	r18, 0x02	; 2
 b7c:	42 0e       	add	r4, r18
 b7e:	51 1c       	adc	r5, r1
 b80:	f8 01       	movw	r30, r16
 b82:	a0 80       	ld	r10, Z
 b84:	b1 80       	ldd	r11, Z+1	; 0x01
 b86:	36 fe       	sbrs	r3, 6
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x174>
 b8a:	69 2d       	mov	r22, r9
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x178>
 b90:	6f ef       	ldi	r22, 0xFF	; 255
 b92:	7f ef       	ldi	r23, 0xFF	; 255
 b94:	c5 01       	movw	r24, r10
 b96:	0e 94 ef 06 	call	0xdde	; 0xdde <strnlen_P>
 b9a:	4c 01       	movw	r8, r24
 b9c:	f3 2d       	mov	r31, r3
 b9e:	f0 68       	ori	r31, 0x80	; 128
 ba0:	3f 2e       	mov	r3, r31
 ba2:	82 01       	movw	r16, r4
 ba4:	33 fc       	sbrc	r3, 3
 ba6:	1b c0       	rjmp	.+54     	; 0xbde <vfprintf+0x1c2>
 ba8:	82 2d       	mov	r24, r2
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	88 16       	cp	r8, r24
 bae:	99 06       	cpc	r9, r25
 bb0:	b0 f4       	brcc	.+44     	; 0xbde <vfprintf+0x1c2>
 bb2:	b6 01       	movw	r22, r12
 bb4:	80 e2       	ldi	r24, 0x20	; 32
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 bbc:	2a 94       	dec	r2
 bbe:	f4 cf       	rjmp	.-24     	; 0xba8 <vfprintf+0x18c>
 bc0:	f5 01       	movw	r30, r10
 bc2:	37 fc       	sbrc	r3, 7
 bc4:	85 91       	lpm	r24, Z+
 bc6:	37 fe       	sbrs	r3, 7
 bc8:	81 91       	ld	r24, Z+
 bca:	5f 01       	movw	r10, r30
 bcc:	b6 01       	movw	r22, r12
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 bd4:	21 10       	cpse	r2, r1
 bd6:	2a 94       	dec	r2
 bd8:	21 e0       	ldi	r18, 0x01	; 1
 bda:	82 1a       	sub	r8, r18
 bdc:	91 08       	sbc	r9, r1
 bde:	81 14       	cp	r8, r1
 be0:	91 04       	cpc	r9, r1
 be2:	71 f7       	brne	.-36     	; 0xbc0 <vfprintf+0x1a4>
 be4:	e8 c0       	rjmp	.+464    	; 0xdb6 <vfprintf+0x39a>
 be6:	84 36       	cpi	r24, 0x64	; 100
 be8:	11 f0       	breq	.+4      	; 0xbee <vfprintf+0x1d2>
 bea:	89 36       	cpi	r24, 0x69	; 105
 bec:	41 f5       	brne	.+80     	; 0xc3e <vfprintf+0x222>
 bee:	f8 01       	movw	r30, r16
 bf0:	37 fe       	sbrs	r3, 7
 bf2:	07 c0       	rjmp	.+14     	; 0xc02 <vfprintf+0x1e6>
 bf4:	60 81       	ld	r22, Z
 bf6:	71 81       	ldd	r23, Z+1	; 0x01
 bf8:	82 81       	ldd	r24, Z+2	; 0x02
 bfa:	93 81       	ldd	r25, Z+3	; 0x03
 bfc:	0c 5f       	subi	r16, 0xFC	; 252
 bfe:	1f 4f       	sbci	r17, 0xFF	; 255
 c00:	08 c0       	rjmp	.+16     	; 0xc12 <vfprintf+0x1f6>
 c02:	60 81       	ld	r22, Z
 c04:	71 81       	ldd	r23, Z+1	; 0x01
 c06:	07 2e       	mov	r0, r23
 c08:	00 0c       	add	r0, r0
 c0a:	88 0b       	sbc	r24, r24
 c0c:	99 0b       	sbc	r25, r25
 c0e:	0e 5f       	subi	r16, 0xFE	; 254
 c10:	1f 4f       	sbci	r17, 0xFF	; 255
 c12:	f3 2d       	mov	r31, r3
 c14:	ff 76       	andi	r31, 0x6F	; 111
 c16:	3f 2e       	mov	r3, r31
 c18:	97 ff       	sbrs	r25, 7
 c1a:	09 c0       	rjmp	.+18     	; 0xc2e <vfprintf+0x212>
 c1c:	90 95       	com	r25
 c1e:	80 95       	com	r24
 c20:	70 95       	com	r23
 c22:	61 95       	neg	r22
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	f0 68       	ori	r31, 0x80	; 128
 c2c:	3f 2e       	mov	r3, r31
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	a3 01       	movw	r20, r6
 c34:	0e 94 41 07 	call	0xe82	; 0xe82 <__ultoa_invert>
 c38:	88 2e       	mov	r8, r24
 c3a:	86 18       	sub	r8, r6
 c3c:	45 c0       	rjmp	.+138    	; 0xcc8 <vfprintf+0x2ac>
 c3e:	85 37       	cpi	r24, 0x75	; 117
 c40:	31 f4       	brne	.+12     	; 0xc4e <vfprintf+0x232>
 c42:	23 2d       	mov	r18, r3
 c44:	2f 7e       	andi	r18, 0xEF	; 239
 c46:	b2 2e       	mov	r11, r18
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	25 c0       	rjmp	.+74     	; 0xc98 <vfprintf+0x27c>
 c4e:	93 2d       	mov	r25, r3
 c50:	99 7f       	andi	r25, 0xF9	; 249
 c52:	b9 2e       	mov	r11, r25
 c54:	8f 36       	cpi	r24, 0x6F	; 111
 c56:	c1 f0       	breq	.+48     	; 0xc88 <vfprintf+0x26c>
 c58:	18 f4       	brcc	.+6      	; 0xc60 <vfprintf+0x244>
 c5a:	88 35       	cpi	r24, 0x58	; 88
 c5c:	79 f0       	breq	.+30     	; 0xc7c <vfprintf+0x260>
 c5e:	b5 c0       	rjmp	.+362    	; 0xdca <vfprintf+0x3ae>
 c60:	80 37       	cpi	r24, 0x70	; 112
 c62:	19 f0       	breq	.+6      	; 0xc6a <vfprintf+0x24e>
 c64:	88 37       	cpi	r24, 0x78	; 120
 c66:	21 f0       	breq	.+8      	; 0xc70 <vfprintf+0x254>
 c68:	b0 c0       	rjmp	.+352    	; 0xdca <vfprintf+0x3ae>
 c6a:	e9 2f       	mov	r30, r25
 c6c:	e0 61       	ori	r30, 0x10	; 16
 c6e:	be 2e       	mov	r11, r30
 c70:	b4 fe       	sbrs	r11, 4
 c72:	0d c0       	rjmp	.+26     	; 0xc8e <vfprintf+0x272>
 c74:	fb 2d       	mov	r31, r11
 c76:	f4 60       	ori	r31, 0x04	; 4
 c78:	bf 2e       	mov	r11, r31
 c7a:	09 c0       	rjmp	.+18     	; 0xc8e <vfprintf+0x272>
 c7c:	34 fe       	sbrs	r3, 4
 c7e:	0a c0       	rjmp	.+20     	; 0xc94 <vfprintf+0x278>
 c80:	29 2f       	mov	r18, r25
 c82:	26 60       	ori	r18, 0x06	; 6
 c84:	b2 2e       	mov	r11, r18
 c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x278>
 c88:	28 e0       	ldi	r18, 0x08	; 8
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	05 c0       	rjmp	.+10     	; 0xc98 <vfprintf+0x27c>
 c8e:	20 e1       	ldi	r18, 0x10	; 16
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0x27c>
 c94:	20 e1       	ldi	r18, 0x10	; 16
 c96:	32 e0       	ldi	r19, 0x02	; 2
 c98:	f8 01       	movw	r30, r16
 c9a:	b7 fe       	sbrs	r11, 7
 c9c:	07 c0       	rjmp	.+14     	; 0xcac <vfprintf+0x290>
 c9e:	60 81       	ld	r22, Z
 ca0:	71 81       	ldd	r23, Z+1	; 0x01
 ca2:	82 81       	ldd	r24, Z+2	; 0x02
 ca4:	93 81       	ldd	r25, Z+3	; 0x03
 ca6:	0c 5f       	subi	r16, 0xFC	; 252
 ca8:	1f 4f       	sbci	r17, 0xFF	; 255
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0x29c>
 cac:	60 81       	ld	r22, Z
 cae:	71 81       	ldd	r23, Z+1	; 0x01
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	0e 5f       	subi	r16, 0xFE	; 254
 cb6:	1f 4f       	sbci	r17, 0xFF	; 255
 cb8:	a3 01       	movw	r20, r6
 cba:	0e 94 41 07 	call	0xe82	; 0xe82 <__ultoa_invert>
 cbe:	88 2e       	mov	r8, r24
 cc0:	86 18       	sub	r8, r6
 cc2:	fb 2d       	mov	r31, r11
 cc4:	ff 77       	andi	r31, 0x7F	; 127
 cc6:	3f 2e       	mov	r3, r31
 cc8:	36 fe       	sbrs	r3, 6
 cca:	0d c0       	rjmp	.+26     	; 0xce6 <vfprintf+0x2ca>
 ccc:	23 2d       	mov	r18, r3
 cce:	2e 7f       	andi	r18, 0xFE	; 254
 cd0:	a2 2e       	mov	r10, r18
 cd2:	89 14       	cp	r8, r9
 cd4:	58 f4       	brcc	.+22     	; 0xcec <vfprintf+0x2d0>
 cd6:	34 fe       	sbrs	r3, 4
 cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <vfprintf+0x2d4>
 cda:	32 fc       	sbrc	r3, 2
 cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x2d4>
 cde:	83 2d       	mov	r24, r3
 ce0:	8e 7e       	andi	r24, 0xEE	; 238
 ce2:	a8 2e       	mov	r10, r24
 ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <vfprintf+0x2d4>
 ce6:	b8 2c       	mov	r11, r8
 ce8:	a3 2c       	mov	r10, r3
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <vfprintf+0x2d6>
 cec:	b8 2c       	mov	r11, r8
 cee:	01 c0       	rjmp	.+2      	; 0xcf2 <vfprintf+0x2d6>
 cf0:	b9 2c       	mov	r11, r9
 cf2:	a4 fe       	sbrs	r10, 4
 cf4:	0f c0       	rjmp	.+30     	; 0xd14 <vfprintf+0x2f8>
 cf6:	fe 01       	movw	r30, r28
 cf8:	e8 0d       	add	r30, r8
 cfa:	f1 1d       	adc	r31, r1
 cfc:	80 81       	ld	r24, Z
 cfe:	80 33       	cpi	r24, 0x30	; 48
 d00:	21 f4       	brne	.+8      	; 0xd0a <vfprintf+0x2ee>
 d02:	9a 2d       	mov	r25, r10
 d04:	99 7e       	andi	r25, 0xE9	; 233
 d06:	a9 2e       	mov	r10, r25
 d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x300>
 d0a:	a2 fe       	sbrs	r10, 2
 d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x2fe>
 d0e:	b3 94       	inc	r11
 d10:	b3 94       	inc	r11
 d12:	04 c0       	rjmp	.+8      	; 0xd1c <vfprintf+0x300>
 d14:	8a 2d       	mov	r24, r10
 d16:	86 78       	andi	r24, 0x86	; 134
 d18:	09 f0       	breq	.+2      	; 0xd1c <vfprintf+0x300>
 d1a:	b3 94       	inc	r11
 d1c:	a3 fc       	sbrc	r10, 3
 d1e:	11 c0       	rjmp	.+34     	; 0xd42 <vfprintf+0x326>
 d20:	a0 fe       	sbrs	r10, 0
 d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x314>
 d24:	b2 14       	cp	r11, r2
 d26:	88 f4       	brcc	.+34     	; 0xd4a <vfprintf+0x32e>
 d28:	28 0c       	add	r2, r8
 d2a:	92 2c       	mov	r9, r2
 d2c:	9b 18       	sub	r9, r11
 d2e:	0e c0       	rjmp	.+28     	; 0xd4c <vfprintf+0x330>
 d30:	b2 14       	cp	r11, r2
 d32:	60 f4       	brcc	.+24     	; 0xd4c <vfprintf+0x330>
 d34:	b6 01       	movw	r22, r12
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 d3e:	b3 94       	inc	r11
 d40:	f7 cf       	rjmp	.-18     	; 0xd30 <vfprintf+0x314>
 d42:	b2 14       	cp	r11, r2
 d44:	18 f4       	brcc	.+6      	; 0xd4c <vfprintf+0x330>
 d46:	2b 18       	sub	r2, r11
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x332>
 d4a:	98 2c       	mov	r9, r8
 d4c:	21 2c       	mov	r2, r1
 d4e:	a4 fe       	sbrs	r10, 4
 d50:	10 c0       	rjmp	.+32     	; 0xd72 <vfprintf+0x356>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e3       	ldi	r24, 0x30	; 48
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 d5c:	a2 fe       	sbrs	r10, 2
 d5e:	17 c0       	rjmp	.+46     	; 0xd8e <vfprintf+0x372>
 d60:	a1 fc       	sbrc	r10, 1
 d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x34e>
 d64:	88 e7       	ldi	r24, 0x78	; 120
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x352>
 d6a:	88 e5       	ldi	r24, 0x58	; 88
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	b6 01       	movw	r22, r12
 d70:	0c c0       	rjmp	.+24     	; 0xd8a <vfprintf+0x36e>
 d72:	8a 2d       	mov	r24, r10
 d74:	86 78       	andi	r24, 0x86	; 134
 d76:	59 f0       	breq	.+22     	; 0xd8e <vfprintf+0x372>
 d78:	a1 fe       	sbrs	r10, 1
 d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x364>
 d7c:	8b e2       	ldi	r24, 0x2B	; 43
 d7e:	01 c0       	rjmp	.+2      	; 0xd82 <vfprintf+0x366>
 d80:	80 e2       	ldi	r24, 0x20	; 32
 d82:	a7 fc       	sbrc	r10, 7
 d84:	8d e2       	ldi	r24, 0x2D	; 45
 d86:	b6 01       	movw	r22, r12
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 d8e:	89 14       	cp	r8, r9
 d90:	38 f4       	brcc	.+14     	; 0xda0 <vfprintf+0x384>
 d92:	b6 01       	movw	r22, r12
 d94:	80 e3       	ldi	r24, 0x30	; 48
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 d9c:	9a 94       	dec	r9
 d9e:	f7 cf       	rjmp	.-18     	; 0xd8e <vfprintf+0x372>
 da0:	8a 94       	dec	r8
 da2:	f3 01       	movw	r30, r6
 da4:	e8 0d       	add	r30, r8
 da6:	f1 1d       	adc	r31, r1
 da8:	80 81       	ld	r24, Z
 daa:	b6 01       	movw	r22, r12
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 db2:	81 10       	cpse	r8, r1
 db4:	f5 cf       	rjmp	.-22     	; 0xda0 <vfprintf+0x384>
 db6:	22 20       	and	r2, r2
 db8:	09 f4       	brne	.+2      	; 0xdbc <vfprintf+0x3a0>
 dba:	42 ce       	rjmp	.-892    	; 0xa40 <vfprintf+0x24>
 dbc:	b6 01       	movw	r22, r12
 dbe:	80 e2       	ldi	r24, 0x20	; 32
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	0e 94 05 07 	call	0xe0a	; 0xe0a <fputc>
 dc6:	2a 94       	dec	r2
 dc8:	f6 cf       	rjmp	.-20     	; 0xdb6 <vfprintf+0x39a>
 dca:	f6 01       	movw	r30, r12
 dcc:	86 81       	ldd	r24, Z+6	; 0x06
 dce:	97 81       	ldd	r25, Z+7	; 0x07
 dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <vfprintf+0x3ba>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	2b 96       	adiw	r28, 0x0b	; 11
 dd8:	e2 e1       	ldi	r30, 0x12	; 18
 dda:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__epilogue_restores__>

00000dde <strnlen_P>:
 dde:	fc 01       	movw	r30, r24
 de0:	05 90       	lpm	r0, Z+
 de2:	61 50       	subi	r22, 0x01	; 1
 de4:	70 40       	sbci	r23, 0x00	; 0
 de6:	01 10       	cpse	r0, r1
 de8:	d8 f7       	brcc	.-10     	; 0xde0 <strnlen_P+0x2>
 dea:	80 95       	com	r24
 dec:	90 95       	com	r25
 dee:	8e 0f       	add	r24, r30
 df0:	9f 1f       	adc	r25, r31
 df2:	08 95       	ret

00000df4 <strnlen>:
 df4:	fc 01       	movw	r30, r24
 df6:	61 50       	subi	r22, 0x01	; 1
 df8:	70 40       	sbci	r23, 0x00	; 0
 dfa:	01 90       	ld	r0, Z+
 dfc:	01 10       	cpse	r0, r1
 dfe:	d8 f7       	brcc	.-10     	; 0xdf6 <strnlen+0x2>
 e00:	80 95       	com	r24
 e02:	90 95       	com	r25
 e04:	8e 0f       	add	r24, r30
 e06:	9f 1f       	adc	r25, r31
 e08:	08 95       	ret

00000e0a <fputc>:
 e0a:	0f 93       	push	r16
 e0c:	1f 93       	push	r17
 e0e:	cf 93       	push	r28
 e10:	df 93       	push	r29
 e12:	fb 01       	movw	r30, r22
 e14:	23 81       	ldd	r18, Z+3	; 0x03
 e16:	21 fd       	sbrc	r18, 1
 e18:	03 c0       	rjmp	.+6      	; 0xe20 <fputc+0x16>
 e1a:	8f ef       	ldi	r24, 0xFF	; 255
 e1c:	9f ef       	ldi	r25, 0xFF	; 255
 e1e:	2c c0       	rjmp	.+88     	; 0xe78 <fputc+0x6e>
 e20:	22 ff       	sbrs	r18, 2
 e22:	16 c0       	rjmp	.+44     	; 0xe50 <fputc+0x46>
 e24:	46 81       	ldd	r20, Z+6	; 0x06
 e26:	57 81       	ldd	r21, Z+7	; 0x07
 e28:	24 81       	ldd	r18, Z+4	; 0x04
 e2a:	35 81       	ldd	r19, Z+5	; 0x05
 e2c:	42 17       	cp	r20, r18
 e2e:	53 07       	cpc	r21, r19
 e30:	44 f4       	brge	.+16     	; 0xe42 <fputc+0x38>
 e32:	a0 81       	ld	r26, Z
 e34:	b1 81       	ldd	r27, Z+1	; 0x01
 e36:	9d 01       	movw	r18, r26
 e38:	2f 5f       	subi	r18, 0xFF	; 255
 e3a:	3f 4f       	sbci	r19, 0xFF	; 255
 e3c:	31 83       	std	Z+1, r19	; 0x01
 e3e:	20 83       	st	Z, r18
 e40:	8c 93       	st	X, r24
 e42:	26 81       	ldd	r18, Z+6	; 0x06
 e44:	37 81       	ldd	r19, Z+7	; 0x07
 e46:	2f 5f       	subi	r18, 0xFF	; 255
 e48:	3f 4f       	sbci	r19, 0xFF	; 255
 e4a:	37 83       	std	Z+7, r19	; 0x07
 e4c:	26 83       	std	Z+6, r18	; 0x06
 e4e:	14 c0       	rjmp	.+40     	; 0xe78 <fputc+0x6e>
 e50:	8b 01       	movw	r16, r22
 e52:	ec 01       	movw	r28, r24
 e54:	fb 01       	movw	r30, r22
 e56:	00 84       	ldd	r0, Z+8	; 0x08
 e58:	f1 85       	ldd	r31, Z+9	; 0x09
 e5a:	e0 2d       	mov	r30, r0
 e5c:	09 95       	icall
 e5e:	89 2b       	or	r24, r25
 e60:	e1 f6       	brne	.-72     	; 0xe1a <fputc+0x10>
 e62:	d8 01       	movw	r26, r16
 e64:	16 96       	adiw	r26, 0x06	; 6
 e66:	8d 91       	ld	r24, X+
 e68:	9c 91       	ld	r25, X
 e6a:	17 97       	sbiw	r26, 0x07	; 7
 e6c:	01 96       	adiw	r24, 0x01	; 1
 e6e:	17 96       	adiw	r26, 0x07	; 7
 e70:	9c 93       	st	X, r25
 e72:	8e 93       	st	-X, r24
 e74:	16 97       	sbiw	r26, 0x06	; 6
 e76:	ce 01       	movw	r24, r28
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	1f 91       	pop	r17
 e7e:	0f 91       	pop	r16
 e80:	08 95       	ret

00000e82 <__ultoa_invert>:
 e82:	fa 01       	movw	r30, r20
 e84:	aa 27       	eor	r26, r26
 e86:	28 30       	cpi	r18, 0x08	; 8
 e88:	51 f1       	breq	.+84     	; 0xede <__ultoa_invert+0x5c>
 e8a:	20 31       	cpi	r18, 0x10	; 16
 e8c:	81 f1       	breq	.+96     	; 0xeee <__ultoa_invert+0x6c>
 e8e:	e8 94       	clt
 e90:	6f 93       	push	r22
 e92:	6e 7f       	andi	r22, 0xFE	; 254
 e94:	6e 5f       	subi	r22, 0xFE	; 254
 e96:	7f 4f       	sbci	r23, 0xFF	; 255
 e98:	8f 4f       	sbci	r24, 0xFF	; 255
 e9a:	9f 4f       	sbci	r25, 0xFF	; 255
 e9c:	af 4f       	sbci	r26, 0xFF	; 255
 e9e:	b1 e0       	ldi	r27, 0x01	; 1
 ea0:	3e d0       	rcall	.+124    	; 0xf1e <__ultoa_invert+0x9c>
 ea2:	b4 e0       	ldi	r27, 0x04	; 4
 ea4:	3c d0       	rcall	.+120    	; 0xf1e <__ultoa_invert+0x9c>
 ea6:	67 0f       	add	r22, r23
 ea8:	78 1f       	adc	r23, r24
 eaa:	89 1f       	adc	r24, r25
 eac:	9a 1f       	adc	r25, r26
 eae:	a1 1d       	adc	r26, r1
 eb0:	68 0f       	add	r22, r24
 eb2:	79 1f       	adc	r23, r25
 eb4:	8a 1f       	adc	r24, r26
 eb6:	91 1d       	adc	r25, r1
 eb8:	a1 1d       	adc	r26, r1
 eba:	6a 0f       	add	r22, r26
 ebc:	71 1d       	adc	r23, r1
 ebe:	81 1d       	adc	r24, r1
 ec0:	91 1d       	adc	r25, r1
 ec2:	a1 1d       	adc	r26, r1
 ec4:	20 d0       	rcall	.+64     	; 0xf06 <__ultoa_invert+0x84>
 ec6:	09 f4       	brne	.+2      	; 0xeca <__ultoa_invert+0x48>
 ec8:	68 94       	set
 eca:	3f 91       	pop	r19
 ecc:	2a e0       	ldi	r18, 0x0A	; 10
 ece:	26 9f       	mul	r18, r22
 ed0:	11 24       	eor	r1, r1
 ed2:	30 19       	sub	r19, r0
 ed4:	30 5d       	subi	r19, 0xD0	; 208
 ed6:	31 93       	st	Z+, r19
 ed8:	de f6       	brtc	.-74     	; 0xe90 <__ultoa_invert+0xe>
 eda:	cf 01       	movw	r24, r30
 edc:	08 95       	ret
 ede:	46 2f       	mov	r20, r22
 ee0:	47 70       	andi	r20, 0x07	; 7
 ee2:	40 5d       	subi	r20, 0xD0	; 208
 ee4:	41 93       	st	Z+, r20
 ee6:	b3 e0       	ldi	r27, 0x03	; 3
 ee8:	0f d0       	rcall	.+30     	; 0xf08 <__ultoa_invert+0x86>
 eea:	c9 f7       	brne	.-14     	; 0xede <__ultoa_invert+0x5c>
 eec:	f6 cf       	rjmp	.-20     	; 0xeda <__ultoa_invert+0x58>
 eee:	46 2f       	mov	r20, r22
 ef0:	4f 70       	andi	r20, 0x0F	; 15
 ef2:	40 5d       	subi	r20, 0xD0	; 208
 ef4:	4a 33       	cpi	r20, 0x3A	; 58
 ef6:	18 f0       	brcs	.+6      	; 0xefe <__ultoa_invert+0x7c>
 ef8:	49 5d       	subi	r20, 0xD9	; 217
 efa:	31 fd       	sbrc	r19, 1
 efc:	40 52       	subi	r20, 0x20	; 32
 efe:	41 93       	st	Z+, r20
 f00:	02 d0       	rcall	.+4      	; 0xf06 <__ultoa_invert+0x84>
 f02:	a9 f7       	brne	.-22     	; 0xeee <__ultoa_invert+0x6c>
 f04:	ea cf       	rjmp	.-44     	; 0xeda <__ultoa_invert+0x58>
 f06:	b4 e0       	ldi	r27, 0x04	; 4
 f08:	a6 95       	lsr	r26
 f0a:	97 95       	ror	r25
 f0c:	87 95       	ror	r24
 f0e:	77 95       	ror	r23
 f10:	67 95       	ror	r22
 f12:	ba 95       	dec	r27
 f14:	c9 f7       	brne	.-14     	; 0xf08 <__ultoa_invert+0x86>
 f16:	00 97       	sbiw	r24, 0x00	; 0
 f18:	61 05       	cpc	r22, r1
 f1a:	71 05       	cpc	r23, r1
 f1c:	08 95       	ret
 f1e:	9b 01       	movw	r18, r22
 f20:	ac 01       	movw	r20, r24
 f22:	0a 2e       	mov	r0, r26
 f24:	06 94       	lsr	r0
 f26:	57 95       	ror	r21
 f28:	47 95       	ror	r20
 f2a:	37 95       	ror	r19
 f2c:	27 95       	ror	r18
 f2e:	ba 95       	dec	r27
 f30:	c9 f7       	brne	.-14     	; 0xf24 <__ultoa_invert+0xa2>
 f32:	62 0f       	add	r22, r18
 f34:	73 1f       	adc	r23, r19
 f36:	84 1f       	adc	r24, r20
 f38:	95 1f       	adc	r25, r21
 f3a:	a0 1d       	adc	r26, r0
 f3c:	08 95       	ret

00000f3e <__prologue_saves__>:
 f3e:	2f 92       	push	r2
 f40:	3f 92       	push	r3
 f42:	4f 92       	push	r4
 f44:	5f 92       	push	r5
 f46:	6f 92       	push	r6
 f48:	7f 92       	push	r7
 f4a:	8f 92       	push	r8
 f4c:	9f 92       	push	r9
 f4e:	af 92       	push	r10
 f50:	bf 92       	push	r11
 f52:	cf 92       	push	r12
 f54:	df 92       	push	r13
 f56:	ef 92       	push	r14
 f58:	ff 92       	push	r15
 f5a:	0f 93       	push	r16
 f5c:	1f 93       	push	r17
 f5e:	cf 93       	push	r28
 f60:	df 93       	push	r29
 f62:	cd b7       	in	r28, 0x3d	; 61
 f64:	de b7       	in	r29, 0x3e	; 62
 f66:	ca 1b       	sub	r28, r26
 f68:	db 0b       	sbc	r29, r27
 f6a:	0f b6       	in	r0, 0x3f	; 63
 f6c:	f8 94       	cli
 f6e:	de bf       	out	0x3e, r29	; 62
 f70:	0f be       	out	0x3f, r0	; 63
 f72:	cd bf       	out	0x3d, r28	; 61
 f74:	09 94       	ijmp

00000f76 <__epilogue_restores__>:
 f76:	2a 88       	ldd	r2, Y+18	; 0x12
 f78:	39 88       	ldd	r3, Y+17	; 0x11
 f7a:	48 88       	ldd	r4, Y+16	; 0x10
 f7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f80:	7d 84       	ldd	r7, Y+13	; 0x0d
 f82:	8c 84       	ldd	r8, Y+12	; 0x0c
 f84:	9b 84       	ldd	r9, Y+11	; 0x0b
 f86:	aa 84       	ldd	r10, Y+10	; 0x0a
 f88:	b9 84       	ldd	r11, Y+9	; 0x09
 f8a:	c8 84       	ldd	r12, Y+8	; 0x08
 f8c:	df 80       	ldd	r13, Y+7	; 0x07
 f8e:	ee 80       	ldd	r14, Y+6	; 0x06
 f90:	fd 80       	ldd	r15, Y+5	; 0x05
 f92:	0c 81       	ldd	r16, Y+4	; 0x04
 f94:	1b 81       	ldd	r17, Y+3	; 0x03
 f96:	aa 81       	ldd	r26, Y+2	; 0x02
 f98:	b9 81       	ldd	r27, Y+1	; 0x01
 f9a:	ce 0f       	add	r28, r30
 f9c:	d1 1d       	adc	r29, r1
 f9e:	0f b6       	in	r0, 0x3f	; 63
 fa0:	f8 94       	cli
 fa2:	de bf       	out	0x3e, r29	; 62
 fa4:	0f be       	out	0x3f, r0	; 63
 fa6:	cd bf       	out	0x3d, r28	; 61
 fa8:	ed 01       	movw	r28, r26
 faa:	08 95       	ret

00000fac <_exit>:
 fac:	f8 94       	cli

00000fae <__stop_program>:
 fae:	ff cf       	rjmp	.-2      	; 0xfae <__stop_program>
